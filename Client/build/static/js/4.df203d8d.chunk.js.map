{"version":3,"file":"static/js/4.df203d8d.chunk.js","mappings":"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","sources":["Components/Filter.js","Components/UserDetails.jsx","Components/notification.js","Components/CircleButton.js","JobPost/JobCard.js","JobPost/JobPostScreen.js","JobPost/JobPostScreenSub.js","JobPost/Navigation/JobScreenNav.jsx","JobPost/Navigation/MobileNav.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst Filter = ({ showFilter, onToggleFilter, onFilter }) => {\n    const [location, setLocation] = useState('');\n    const [skills, setSkills] = useState('');\n    const [experience, setExperience] = useState('');\n    const [company, setCompany] = useState('');\n    const [sort, setSort] = useState('');\n    const [workMode, setWorkMode] = useState([]);\n    const [employmentType, setEmploymentType] = useState([]);\n    const [salary, setSalary] = useState('');\n\n    const handleFilter = () => {\n        onFilter(location, skills, company, sort, workMode, experience, employmentType, salary);\n    };\n\n    const handleCancel = () => {\n        setLocation('');\n        setSkills('');\n        setExperience('');\n        setCompany('');\n        setSort('');\n        setWorkMode([]);\n        setEmploymentType([]);\n        onToggleFilter();\n    };\n\n    return showFilter ? (\n        <div className=\"filter-container\">\n            <div className=\"filter-row\">\n                <div>\n                    <label className=\"filter-label\">Location:</label>\n                    <input type=\"text\" className=\"filter-input\" value={location} onChange={(e) => setLocation(e.target.value)} />\n                </div>\n                <div>\n                    <label className=\"filter-label\">Skills:</label>\n                    <input type=\"text\" className=\"filter-input\" value={skills} onChange={(e) => setSkills(e.target.value)} />\n                </div>\n            </div>\n\n            <div className=\"filter-row\">\n                <div>\n                    <label className=\"filter-label\">Company:</label>\n                    <input type=\"text\" className=\"filter-input\" value={company} onChange={(e) => setCompany(e.target.value)} />\n                </div>\n                <div>\n                    <label className=\"filter-label\">Experience:</label>\n                    <select className=\"filter-select\" value={experience} onChange={(e) => setExperience(e.target.value)}>\n                        <option value=\"\">Select Experience</option>\n                        <option value=\"Freshers\">Freshers</option>\n                        <option value=\"1-2 years\">1-2 years</option>\n                        <option value=\"3-5 years\">3-5 years</option>\n                        <option value=\"6-9 years\">6-9 years</option>\n                        <option value=\"10-15 years\">10-15 years</option>\n                        <option value=\"15+ years\">15+ years</option>\n                    </select>\n                </div>\n            </div>\n\n            <div className=\"filter-row\">\n                <div>\n                    <label className=\"filter-label\">Sort:</label>\n                    <select className=\"filter-select\" value={sort} onChange={(e) => setSort(e.target.value)}>\n                        <option value=\"\">Sort</option>\n                        <option value=\"7\">Last 7 days</option>\n                        <option value=\"15\">Last 15 days</option>\n                        <option value=\"30\">Last 30 days</option>\n                    </select>\n                </div>\n                <div>\n                    <label className=\"filter-label\">Salary:</label>\n                    <select className=\"filter-select\" value={salary} onChange={(e) => setSalary(e.target.value)}>\n                        <option value=\"\">Select salary</option>\n                        <option value=\"1-3 Lakhs\">1-3 Lakhs</option>\n                        <option value=\"3-5 Lakhs\">3-5 Lakhs</option>\n                        <option value=\"5-8 Lakhs\">5-8 Lakhs</option>\n                        <option value=\"8-13 Lakhs\">8-13 Lakhs</option>\n                        <option value=\"13-20 Lakhs\">13-20 Lakhs</option>\n                        <option value=\"20-40 Lakhs\">20-40 Lakhs</option>\n                        <option value=\"40-60 Lakhs\">40-60 Lakhs</option>\n                        <option value=\"60+ Lakhs\">60+ Lakhs</option>\n                    </select>\n                </div>\n            </div>\n\n            <button className=\"filter-button\" onClick={handleFilter}>Apply</button>\n            <button className=\"filter-cancel-button\" onClick={handleCancel}>Cancel</button>\n        </div>\n    ) : null;\n};\n\nexport default Filter;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport API_URLS from \"../config\";\n\nconst ENV = process.env.REACT_APP_ENV || \"production\";\nconst API_URL = API_URLS[ENV] + \"/signIn/sessioncheck\";\n\nconst UserDetails = ({\n    showUserDetails,\n    onToggleUserDetails,\n    onLogout,\n    onSettings,\n    onProfile,\n    onSaved,\n    onJobPost,\n}) => {\n    const [email, setEmail] = useState(\"\");\n    const [userType, setUserType] = useState(null);\n    const [isValid, setIsValid] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        axios.defaults.withCredentials = true;\n\n        axios\n            .get(API_URL)\n            .then((res) => {\n                console.log(res);\n                if (res.data.valid) {\n                    setEmail(res.data.email);\n                    setUserType(res.data.userType);\n                    setIsValid(true);\n                } else {\n                    setIsValid(false);\n                }\n            })\n            .catch((err) => console.log(err));\n    }, [navigate]);\n\n    return showUserDetails ? (\n        <div className=\"userDetailsContainer\">\n            <ul>\n                <li>Hi, {email}</li>\n                <li>\n                    <button className=\"user-link profile-link\" onClick={onProfile}>Profile</button>\n                </li>\n                <li>\n                    <button className=\"user-link logout-link\" onClick={onLogout}>Sign Out</button>\n                </li>\n                <li>\n                    <button className=\"user-link saved-link\" onClick={onSaved}>Saved</button>\n                </li>\n                <li>\n                    <button className=\"user-link settings-link\" onClick={onSettings}>Settings</button>\n                </li>\n                {userType === \"A\" && (\n                    <li>\n                        <button className=\"user-link jobpost-link\" onClick={onJobPost}>Job Post</button>\n                    </li>\n                )}\n            </ul>\n        </div>\n    ) : null;\n\n};\n\nexport default UserDetails;","import React from \"react\";\n\nfunction Notification(showNotification  , ontoggleNOtificaton){\n\n\n    return showNotification ? (\n        <div className=\"NotificationContainer\">\n\n            <p>No Notification..!</p>\n\n        </div>\n\n    ) : null;\n\n\n}\n\nexport default Notification;","import React from 'react';\n\nconst CircleButton = ({ color }) => {\n  const buttonStyle = {\n    width: '30px',\n    height: '30px',\n    backgroundColor: color, // Use the color prop for the button background color\n    borderRadius: '50%', // Make it a circle\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: 'white', // Text color\n    fontSize: '24px',\n    border: 'none', // Remove button border\n    cursor: 'pointer',\n    outline: 'none', // Remove focus outline\n  };\n\n  const handleClick = () => {\n    // Add your click event logic here\n    // For example, you can toggle a state or perform some action\n  };\n\n  return (\n    <div>\n      <style>\n        {`\n          .circle-button::before {\n            content: \"\\\\2713\"; /* Unicode checkmark symbol */\n            font-weight: bold;\n            transform: scale(1.5); /* Adjust the size of the checkmark */\n          }\n        `}\n      </style>\n      <button className=\"circle-button\" style={buttonStyle} onClick={handleClick}></button>\n    </div>\n  );\n};\n\nexport default CircleButton;\n","import React from 'react';\nimport CircleButton from '../Components/CircleButton';\nimport CompanyLogo from \"../Asset/office.png\";\n\nfunction JobCard({ job, skillMatches, isActive, onClick }) {\n  const { role, companyName, salary, experience, workMode, employmentType, skills, description, jobID, location, Posted_Date } = job;\n\n  // Function to calculate the posted time and return style based on time\n  const getFormattedPostedTime = (postedDate) => {\n    const now = new Date();\n    const posted = new Date(postedDate);\n    const diffTime = Math.abs(now - posted);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));\n\n    let timeString;\n    let className = '';\n\n    if (diffHours < 24) {\n      timeString = `${diffHours} hours ago`;\n    } else if (diffDays < 7) {\n      timeString = `${diffDays} days ago`;\n    } else if (diffDays < 30) {\n      const weeks = Math.floor(diffDays / 7);\n      timeString = `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n    } else {\n      const weeks = Math.floor(diffDays / 7);\n      timeString = `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n    }\n\n    // Set class name based on the difference in days\n    if (diffDays < 15) {\n      className = 'recentPosted';\n    }\n\n    return { timeString, className };\n  };\n\n  const truncateDescription = (text, limit) => {\n    if (text.length <= limit) {\n      return text;\n    }\n    return text.slice(0, limit) + '...';\n  };\n\n  const buttonColor = skillMatches ? 'green' : '#3498db';\n  const { timeString, className } = getFormattedPostedTime(Posted_Date);\n\n  return (\n    <div className={`jobCard ${isActive ? 'activeJobCard' : ''}`} onClick={onClick}>\n      <div className=\"InnerCard\">\n        <img src={CompanyLogo} alt=\"Company Logo\" className=\"CompanyLogo\" />\n        <h2>{role}</h2>\n        <h3>{companyName}</h3>\n        <h6>Location : {location} </h6>\n        <p><strong>Salary: </strong>{salary}</p>\n        <p><strong>Experience: </strong>{experience}</p>\n        <p><strong>Skills: </strong>{skills}</p>\n        <p className=\"description\">Description: {truncateDescription(description, 100)}</p>\n      </div>\n      <div className=\"jobFooter\">\n        <div className=\"prefer_Section\">\n          <CircleButton color={buttonColor} />\n        </div>\n        <p className={`postedTime ${className}`}>{timeString}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default JobCard;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport JobCard from \"./JobCard\";\nimport JobScreenNav from \"./Navigation/JobScreenNav\";\nimport JobPostScreenSub from \"./JobPostScreenSub\";\nimport UserDetails from \"../Components/UserDetails\";\nimport Filter from \"../Components/Filter\";\nimport API_URLS from \"../config\";\nimport MobileNav from \"./Navigation/MobileNav\";\nimport Notification from \"../Components/notification\";\n\nconst ENV = process.env.REACT_APP_ENV || \"production\";\nconst API_URL = API_URLS[ENV] + \"/addJobPost/listJobPosts\";\nconst API_URL_SIGNOUT = API_URLS[ENV] + \"/signOut\";\nconst API_URL_SESSION = API_URLS[ENV] + \"/signIn/sessioncheck\";\n\nfunction JobPostScreen() {\n  const [jobData, setJobData] = useState([]);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchLocation, setSearchLocation] = useState(\"\");\n  const [skills, setSkills] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [showUserDetails, setShowUserDetails] = useState(false);\n  const [showFilter, setShowFilter] = useState(false);\n  const [showSelectedJob, setShowSelectedJob] = useState(false);\n  const [showNotification, setShowNotification] = useState(false);\n  const [sort, setSort] = useState(\"\");\n  const [workMode, setWorkMode] = useState(\"\");\n  const [employmentType, setEmploymentType] = useState(\"\");\n  const [salary, setSalary] = useState(\"\");\n  const [experience, setExperience] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [showSearch, setShowSearch] = useState(false);\n  const jobPostContainerRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Listen for back button presses and navigate accordingly\nuseEffect(() => {\n  const handleBackNavigation = () => {\n    if (showSelectedJob) {\n      setShowSelectedJob(false);\n      document.body.classList.remove(\"no-scroll\");\n      navigate(\"/jobPostScreen\");  // Return to main screen if details are open\n    }\n  };\n\n  if (showSelectedJob) {\n    window.addEventListener(\"popstate\", handleBackNavigation);\n  }\n\n  return () => {\n    window.removeEventListener(\"popstate\", handleBackNavigation);\n  };\n}, [showSelectedJob, navigate]);\n\n\n  useEffect(() => {\n    const fetchJobData = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(API_URL);\n        setJobData(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching job data:\", error);\n        setLoading(false);\n      }\n    };\n\n    fetchJobData();\n  }, []);\n\n  useEffect(() => {\n    axios.defaults.withCredentials = true;\n\n    const fetchSessionData = async () => {\n      setLoading(true);\n      try {\n        const res = await axios.get(API_URL_SESSION, {});\n        const valid = res.data.valid;\n        const userEmail = res.data.email;\n\n        if (valid) {\n          setEmail(userEmail);\n          console.log(\"email\", userEmail);\n        } else {\n        }\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    };\n\n    fetchSessionData();\n  }, [navigate]);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const jobRoleFromURL = queryParams.get(\"jobSearch\");\n    const locationFromURL = queryParams.get(\"location\");\n\n    if (jobRoleFromURL) {\n      setSearchQuery(jobRoleFromURL);\n    } else if (location.state?.jobSearch) {\n      setSearchQuery(location.state.jobSearch);\n    }\n\n    if (locationFromURL) {\n      setSearchLocation(locationFromURL);\n    } else if (location.state?.location) {\n      setSearchLocation(location.state.location);\n    }\n\n    console.log(\"location\", location);\n  }, [location.search, location.state]);\n\n\n  useEffect(() => {\n    const handleResize = () => {\n      const isMobileView = window.innerWidth < 768;\n      setIsMobile(isMobileView);\n      if (!isMobileView) {\n        setShowSearch(true);\n      }\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const jobID = queryParams.get(\"jobid\");\n\n    if (jobID && jobData.length > 0) {\n      const selectedJob = jobData.find((job) => job.jobID === jobID);\n\n      if (selectedJob) {\n        setSelectedJob(selectedJob);\n        setShowSelectedJob(true);\n        document.body.classList.add(\"no-scroll\");\n      } else {\n        const fetchJobDetails = async () => {\n          try {\n            const response = await axios.get(\n              `${API_URLS[ENV]}/addJobPost/${jobID}`,\n            );\n            setSelectedJob(response.data);\n            setShowSelectedJob(true);\n            document.body.classList.add(\"no-scroll\");\n          } catch (error) {\n            console.error(\"Error fetching job details:\", error);\n          }\n        };\n        fetchJobDetails();\n      }\n    }\n  }, [location.search, jobData]);\n\n  const handleJobCardClick = (job) => {\n    setSelectedJob(job);\n    setShowSelectedJob(true);\n    navigate(`/jobPostScreen?jobid=${job.jobID}`);\n    document.body.classList.add(\"no-scroll\");\n  };\n\n  const handleSearch = (searchValue) => {\n    setSearchQuery(searchValue);\n  };\n\n  const handleFilter = (\n    location,\n    skills,\n    company,\n    sort,\n    workMode,\n    experience,\n    employmentType,\n    salary,\n  ) => {\n    setSearchLocation(location);\n    setSkills(skills);\n    setCompany(company);\n    setWorkMode(workMode);\n    setExperience(experience);\n    setSort(sort);\n    setEmploymentType(employmentType);\n    setSalary(salary);\n    setShowFilter(false);\n  };\n\n  const toggleUserDetails = () => {\n    setShowUserDetails(!showUserDetails);\n    setShowFilter(false);\n    setShowNotification(false);\n    // setShowSelectedJob(false);\n  };\n\n  const toggleFilterDetails = () => {\n    setShowFilter(!showFilter);\n    setShowUserDetails(false);\n    setShowNotification(false);\n    setShowSelectedJob(false);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await axios.get(API_URL_SIGNOUT);\n      navigate(\"/SignIn\");\n    } catch (error) {\n      console.error(\"Error logging out:\", error);\n    }\n  };\n\n  const toggleNotification = () => {\n    setShowNotification(!showNotification);\n    setShowSelectedJob(false);\n    setShowUserDetails(false);\n    setShowFilter(false);\n  };\n\n  const handleSettings = () => {\n    navigate(\"/Setting\");\n  };\n\n  const handleProfile = () => {\n    navigate(\"/Profile\");\n  };\n\n  const handleOnSaved = () => {\n    navigate(\"/Saved\");\n  };\n\n  const handleJobPost = () =>{\n    navigate(\"/JobpostDetail\");\n  }\n  const handleShareJob = (jobID) => {\n    const shareLink = `${window.location.origin}/viewjobs/${jobID}`;\n    navigator.clipboard\n      .writeText(shareLink)\n      .then(() => alert(\"Job link copied to clipboard!\"))\n      .catch((err) => console.error(\"Error copying job link:\", err));\n  };\n\n  const filteredJobs = jobData.filter((job) => {\n    const postedDate = new Date(job.Posted_Date);\n    const currentDate = new Date();\n    const differenceInDays = Math.floor(\n      (currentDate - postedDate) / (1000 * 60 * 60 * 24),\n    );\n\n    return (\n      job.role.toLowerCase().includes(searchQuery.toLowerCase()) &&\n      (searchLocation\n        ? job.location.toLowerCase().includes(searchLocation.toLowerCase())\n        : true) &&\n      (skills\n        ? job.skills.toLowerCase().includes(skills.toLowerCase())\n        : true) &&\n      (company\n        ? job.companyName.toLowerCase().includes(company.toLowerCase())\n        : true) &&\n      (!workMode ||\n        workMode.length === 0 ||\n        workMode.some((mode) => job.workMode && job.workMode.includes(mode))) &&\n      (!employmentType ||\n        employmentType.length === 0 ||\n        employmentType.some(\n          (type) => job.employmentType && job.employmentType.includes(type),\n        )) &&\n      (experience\n        ? job.experience.toLowerCase().includes(experience.toLowerCase())\n        : true) &&\n      (salary\n        ? job.salary.toLowerCase().includes(salary.toLowerCase())\n        : true) &&\n      (sort === \"\" ||\n        parseInt(sort) === 0 ||\n        differenceInDays <= parseInt(sort))\n    );\n  });\n\n  const showJobContainer =  !showNotification && !showFilter;\n\n  return (\n    <>\n      <JobScreenNav\n        onSearch={handleSearch}\n        toggleFilterDetails={toggleFilterDetails}\n        toggleUserDetails={toggleUserDetails}\n        toggleNotification={toggleNotification}\n        showSearch={showSearch}\n      />\n\n      {showNotification && (\n        <Notification\n          showNotification={showNotification}\n          ontoggleNotification={toggleNotification}\n        />\n      )}\n\n      {showUserDetails && (\n        <UserDetails\n          showUserDetails={showUserDetails}\n          onToggleUserDetails={toggleUserDetails}\n          onLogout={handleLogout}\n          onSettings={handleSettings}\n          onProfile={handleProfile}\n          onSaved={handleOnSaved}\n          onJobPost ={handleJobPost}\n        />\n      )}\n      {showFilter && (\n        <Filter\n          showFilter={showFilter}\n          onToggleFilter={toggleFilterDetails}\n          onFilter={handleFilter}\n        />\n      )}\n      <MobileNav\n        onSearch={handleSearch}\n        toggleFilterDetails={toggleFilterDetails}\n        toggleUserDetails={toggleUserDetails}\n        setShowSearch={setShowSearch}\n      />\n      <div className=\"jobPostContainer\" ref={jobPostContainerRef}>\n        {showJobContainer && (\n          <div className=\"jobcontainer\">\n            {filteredJobs.map((job) => (\n              <div key={job.jobID} onClick={() => handleJobCardClick(job)}>\n                <JobCard job={job} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {showSelectedJob && selectedJob && (\n        <div className=\"Selectedjob\">\n          <JobPostScreenSub\n            job={selectedJob}\n            onClose={() => {\n              setShowSelectedJob(false);\n              document.body.classList.remove(\"no-scroll\");\n              navigate(\"/jobPostScreen\");\n            }}\n            onShare={handleShareJob}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default JobPostScreen;","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport API_URLS from \"../config\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ENV = process.env.REACT_APP_ENV || \"production\";\nconst API_URL_SAVE = API_URLS[ENV] + \"/addJobPost/saveJob\";\n\nfunction JobPostScreenSub({ job, onClose, onShare }) {\n  const navigate = useNavigate();\n\n  \n  useEffect(() => {\n    const handleBackNavigation = (event) => {\n      event.preventDefault();\n      navigate(-1); \n    };\n\n    window.history.pushState(null, null, window.location.pathname); \n    window.addEventListener(\"popstate\", handleBackNavigation);\n\n    return () => {\n      window.removeEventListener(\"popstate\", handleBackNavigation);\n    };\n  }, [navigate]);\n\n  if (!job) {\n    return <div>Select a job to view details.</div>;\n  }\n\n  const userId = 1;\n  const handleSaveJob = async () => {\n    try {\n      const response = await axios.post(API_URL_SAVE, {\n        userId,\n        jobId: job.jobID.toString(),\n      });\n      console.log(job.jobID.toString());\n      console.log(\"Job saved successfully:\", response.data);\n    } catch (error) {\n      console.error(\"Error saving job:\", error);\n    }\n  };\n\n  const {\n    jobID,\n    role,\n    companyName,\n    salary,\n    experience,\n    workMode,\n    employmentType,\n    skills,\n    description,\n    expireon,\n    externalLink,\n    jobLink,\n    Posted_Date,\n  } = job;\n\n  const handleApplyJob = () => {\n    let link = jobLink;\n    if (externalLink && jobLink) {\n      if (!jobLink.startsWith(\"http://\") && !jobLink.startsWith(\"https://\")) {\n        link = \"http://\" + jobLink;\n      }\n      window.open(link, \"_blank\");\n    } else {\n      console.log(\"Applying for the job...\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"header-section\">\n        <h2>Role criteria</h2>\n        <button onClick={onClose} className=\"crossbutton\">x</button>\n      </div>\n      <p>Role: {role}</p>\n      <p>Company: {companyName}</p>\n      <p>Salary: {salary}</p>\n      <p>Experience: {experience}</p>\n      <p>Skills: {skills}</p>\n      <div className=\"btn-ssa\">\n        <button onClick={handleApplyJob} className=\"btn-apply\">Apply Job</button>\n        <button onClick={() => onShare(jobID)} className=\"btn-share\">Share Job</button>\n        <button onClick={handleSaveJob} className=\"btn-save\">Save</button>\n      </div>\n      <div className=\"Jobdescription\">\n        <h3>Description</h3>\n        <p> Work Mode : {workMode}</p>\n        <p> Employment Type: {employmentType}</p>\n        <p>{description}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default JobPostScreenSub;\n","import React, { useState } from \"react\";\nimport userImage from \"../../Asset/user.png\";\nimport Logo from \"../../Asset/Logo.png\";\nimport searchicon from \"../../Asset/search_icon.png\";\nimport Filtericon from \"../../Asset/filtericon.png\";\nimport NotificationIcon from \"../../Asset/notificationicon.png\";\nimport { Link } from \"react-router-dom\";\nimport Logotext from \"../../Asset/LOgoGdest.png\";\n\nconst JobScreenNav = ({\n  onSearch,\n  toggleFilterDetails,\n  toggleUserDetails,\n  toggleNotification,\n  showSearch,\n  setShowSearch,\n}) => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleSearchInput = (e) => {\n    const inputValue = e.target.value;\n    setSearchValue(inputValue);\n  };\n\n  const handleSearch = () => {\n    onSearch(searchValue);\n  };\n\n  const toggleUserPanel = () => {\n    toggleUserDetails();\n  };\n\n  const toggleFilterPanel = () => {\n    toggleFilterDetails();\n  };\n\n  const toggleNotificationPanel = () => {\n    toggleNotification();\n  };\n\n  return (\n    <div className=\"jobScreenNavContainer\">\n      <div className=\"brandLogo\">\n        <Link to=\"/\">\n          <img src={Logo} alt=\"Code Garbages\" className=\"img_Logo\" />\n        </Link>\n      </div>\n      <div className=\"search-container\">\n        {!showSearch && ( \n          <img src={Logotext} alt=\"GDEST.in\" className=\"logotexts\" />\n        )}\n        {showSearch && ( \n          <>\n            <input\n              type=\"text\"\n              className=\"search-input\"\n              placeholder=\"Search...\"\n              value={searchValue}\n              onChange={handleSearchInput}\n            />\n            <button className=\"Searchbutton\" onClick={handleSearch}>\n              <img src={searchicon} alt=\"Search Icon\" className=\"iconStyle\" />\n            </button>\n          </>\n        )}\n        <button className=\"Filterbutton\" onClick={toggleFilterPanel}>\n          <img src={Filtericon} alt=\"Filtericon\" className=\"iconStyle\" />\n        </button>\n        <button\n          className=\"Notificationbutton\"\n          onClick={toggleNotificationPanel}\n        >\n          <img\n            src={NotificationIcon}\n            alt=\"Notificationicon\"\n            className=\"iconStyle\"\n          />\n        </button>\n      </div>\n      <img\n        src={userImage}\n        alt=\"User\"\n        className=\"userIcon\"\n        onClick={toggleUserPanel}\n      />\n    </div>\n  );\n};\n\nexport default JobScreenNav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport HomeIcon from \"../../Asset/homeicon.png\";\nimport SearchIcon from \"../../Asset/search_icon.png\";\nimport FilterIcon from \"../../Asset/filtericon.png\";\nimport UserIcon from \"../../Asset/user.png\";\nimport LearningIcon from \"../../Asset/learningicon.png\";\n\nconst MobileNav = ({\n  toggleFilterDetails,\n  setShowSearch,\n  toggleUserDetails,\n}) => {\n  const handleFilterClick = () => {\n    toggleFilterDetails();\n  };\n\n  const handleSearchClick = () => {\n    setShowSearch((prev) => !prev);\n  };\n\n  const toggleUserPanel = () => {\n    toggleUserDetails();\n  };\n\n  return (\n    <div>\n      <div className=\"mobileNavContainer\">\n        <Link to=\"/\">\n          <img src={HomeIcon} alt=\"Home Icon\" className=\"navIcon\" />\n        </Link>\n        <img\n          src={SearchIcon}\n          alt=\"Search Icon\"\n          className=\"navIcon\"\n          onClick={handleSearchClick}\n        />\n        <img\n          src={FilterIcon}\n          alt=\"Filter Icon\"\n          className=\"navIcon\"\n          onClick={handleFilterClick}\n        />\n        <Link className=\"Linkk\" to=\"/LearningDefault\">\n          <img src={LearningIcon} alt=\"Learning Icon\" className=\"navIcon\" />\n        </Link>\n        <img\n          src={UserIcon}\n          alt=\"User Icon\"\n          className=\"navIcon\"\n          onClick={toggleUserPanel}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MobileNav;\n"],"names":["_ref","showFilter","onToggleFilter","onFilter","location","setLocation","useState","skills","setSkills","experience","setExperience","company","setCompany","sort","setSort","workMode","setWorkMode","employmentType","setEmploymentType","salary","setSalary","_jsxs","className","children","_jsx","type","value","onChange","e","target","onClick","handleFilter","handleCancel","ENV","process","REACT_APP_ENV","API_URL","API_URLS","showUserDetails","onToggleUserDetails","onLogout","onSettings","onProfile","onSaved","onJobPost","email","setEmail","userType","setUserType","isValid","setIsValid","navigate","useNavigate","useEffect","axios","defaults","withCredentials","get","then","res","console","log","data","valid","catch","err","showNotification","ontoggleNOtificaton","color","buttonStyle","width","height","backgroundColor","borderRadius","display","justifyContent","alignItems","fontSize","border","cursor","outline","style","handleClick","job","skillMatches","isActive","role","companyName","description","jobID","Posted_Date","buttonColor","timeString","postedDate","now","Date","posted","diffTime","Math","abs","diffDays","ceil","diffHours","concat","weeks","floor","getFormattedPostedTime","src","CompanyLogo","alt","text","limit","length","slice","CircleButton","truncateDescription","API_URL_SIGNOUT","API_URL_SESSION","jobData","setJobData","selectedJob","setSelectedJob","searchQuery","setSearchQuery","searchLocation","setSearchLocation","setShowUserDetails","setShowFilter","showSelectedJob","setShowSelectedJob","setShowNotification","isMobile","setIsMobile","window","innerWidth","showSearch","setShowSearch","jobPostContainerRef","useRef","loading","setLoading","useLocation","handleBackNavigation","document","body","classList","remove","addEventListener","removeEventListener","async","response","error","fetchJobData","userEmail","fetchSessionData","_location$state","_location$state2","queryParams","URLSearchParams","search","jobRoleFromURL","locationFromURL","state","jobSearch","handleResize","isMobileView","find","add","fetchJobDetails","handleSearch","searchValue","toggleUserDetails","toggleFilterDetails","toggleNotification","filteredJobs","filter","currentDate","differenceInDays","toLowerCase","includes","some","mode","parseInt","showJobContainer","_Fragment","JobScreenNav","onSearch","Notification","ontoggleNotification","UserDetails","handleSettings","handleProfile","handleOnSaved","handleJobPost","Filter","MobileNav","ref","map","handleJobCardClick","JobCard","JobPostScreenSub","onClose","onShare","shareLink","origin","navigator","clipboard","writeText","alert","API_URL_SAVE","event","preventDefault","history","pushState","pathname","expireon","externalLink","jobLink","handleApplyJob","link","startsWith","open","post","userId","jobId","toString","setSearchValue","Link","to","Logo","Logotext","placeholder","inputValue","searchicon","toggleFilterPanel","Filtericon","toggleNotificationPanel","userImage","toggleUserPanel","SearchIcon","handleSearchClick","prev","FilterIcon","handleFilterClick","UserIcon"],"sourceRoot":""}