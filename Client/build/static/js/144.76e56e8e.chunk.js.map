{"version":3,"file":"static/js/144.76e56e8e.chunk.js","mappings":"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","sources":["Learning/DSA/MergeSort.jsx","Learning/buttonGroup.js","../node_modules/prismjs/components/prism-java.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport ButtonGroup from '../buttonGroup';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-java';\n\nfunction MergeSort() {\n  const javaLangMergeSortCode = [\n    \"public class MergeSort {\",\n    \"    public static void main(String[] args) {\",\n    \"        int[] arr = {12, 11, 13, 5, 6, 7};\",\n    \"        mergeSort(arr, 0, arr.length - 1);\",\n    \"        System.out.println(\\\"Sorted array: \\\");\",\n    \"        printArray(arr);\",\n    \"    }\",\n    \"    public static void mergeSort(int[] arr, int left, int right) {\",\n    \"        if (left < right) {\",\n    \"            int mid = (left + right) / 2;\",\n    \"            mergeSort(arr, left, mid);\",\n    \"            mergeSort(arr, mid + 1, right);\",\n    \"            merge(arr, left, mid, right);\",\n    \"        }\",\n    \"    }\",\n    \"    public static void merge(int[] arr, int left, int mid, int right) {\",\n    \"        int n1 = mid - left + 1;\",\n    \"        int n2 = right - mid;\",\n    \"        int[] leftArray = new int[n1];\",\n    \"        int[] rightArray = new int[n2];\",\n    \"        for (int i = 0; i < n1; i++)\",\n    \"            leftArray[i] = arr[left + i];\",\n    \"        for (int i = 0; i < n2; i++)\",\n    \"            rightArray[i] = arr[mid + 1 + i];\",\n    \"        int i = 0, j = 0, k = left;\",\n    \"        while (i < n1 && j < n2) {\",\n    \"            if (leftArray[i] <= rightArray[j]) {\",\n    \"                arr[k] = leftArray[i];\",\n    \"                i++;\",\n    \"            } else {\",\n    \"                arr[k] = rightArray[j];\",\n    \"                j++;\",\n    \"            }\",\n    \"            k++;\",\n    \"        }\",\n    \"        while (i < n1) {\",\n    \"            arr[k] = leftArray[i];\",\n    \"            i++;\",\n    \"            k++;\",\n    \"        }\",\n    \"        while (j < n2) {\",\n    \"            arr[k] = rightArray[j];\",\n    \"            j++;\",\n    \"            k++;\",\n    \"        }\",\n    \"    }\",\n    \"    public static void printArray(int[] arr) {\",\n    \"        for (int i : arr) {\",\n    \"            System.out.print(i + \\\" \\\");\",\n    \"        }\",\n    \"        System.out.println();\",\n    \"    }\",\n    \"}\"\n  ];\n\n  const cLangMergeSortCode = [\n    \"#include <stdio.h>\",\n    \"void merge(int arr[], int l, int m, int r) {\",\n    \"    int i, j, k;\",\n    \"    int n1 = m - l + 1;\",\n    \"    int n2 = r - m;\",\n    \"    int L[n1], R[n2];\",\n    \"    for (i = 0; i < n1; i++)\",\n    \"        L[i] = arr[l + i];\",\n    \"    for (j = 0; j < n2; j++)\",\n    \"        R[j] = arr[m + 1 + j];\",\n    \"    i = 0; j = 0; k = l;\",\n    \"    while (i < n1 && j < n2) {\",\n    \"        if (L[i] <= R[j]) {\",\n    \"            arr[k] = L[i];\",\n    \"            i++;\",\n    \"        } else {\",\n    \"            arr[k] = R[j];\",\n    \"            j++;\",\n    \"        }\",\n    \"        k++;\",\n    \"    }\",\n    \"    while (i < n1) {\",\n    \"        arr[k] = L[i];\",\n    \"        i++;\",\n    \"        k++;\",\n    \"    }\",\n    \"    while (j < n2) {\",\n    \"        arr[k] = R[j];\",\n    \"        j++;\",\n    \"        k++;\",\n    \"    }\",\n    \"}\",\n    \"void mergeSort(int arr[], int l, int r) {\",\n    \"    if (l < r) {\",\n    \"        int m = l + (r - l) / 2;\",\n    \"        mergeSort(arr, l, m);\",\n    \"        mergeSort(arr, m + 1, r);\",\n    \"        merge(arr, l, m, r);\",\n    \"    }\",\n    \"}\",\n    \"void printArray(int A[], int size) {\",\n    \"    for (int i = 0; i < size; i++)\",\n    \"        printf(\\\"%d \\\", A[i]);\",\n    \"    printf(\\\"\\\\n\\\");\",\n    \"}\",\n    \"int main() {\",\n    \"    int arr[] = {12, 11, 13, 5, 6, 7};\",\n    \"    int arr_size = sizeof(arr) / sizeof(arr[0]);\",\n    \"    printf(\\\"Given array is \\\\n\\\");\",\n    \"    printArray(arr, arr_size);\",\n    \"    mergeSort(arr, 0, arr_size - 1);\",\n    \"    printf(\\\"\\\\nSorted array is \\\\n\\\");\",\n    \"    printArray(arr, arr_size);\",\n    \"    return 0;\",\n    \"}\"\n  ];\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  return (\n    <div className=\"MergeSort\">\n      <h2>Merge Sort</h2>\n      <p>\n        Merge sort is a way of arranging a list of things in order. It works by repeatedly dividing the list into smaller parts until each part has only one item. Then, it combines (merges) these small parts back together in a sorted order. This process ensures that the entire list ends up sorted. Merge sort is known for being a reliable and efficient method for sorting things.\n      </p>\n\n      <h3>Algorithm:</h3>\n      <p>\n        <strong>Step-by-step explanation:</strong>\n        <ol>\n          <li><h4>Divide:</h4> Divide the list into two halves.</li>\n          <li><h4>Conquer:</h4> Recursively sort each half.</li>\n          <li><h4>Combine:</h4> Merge the two halves to produce a sorted list.</li>\n        </ol>\n      </p>\n\n      <ButtonGroup\n        handleLanguageChange={(language) => (` ${language}`)}\n        cLangElements={cLangMergeSortCode}\n        javaLangElements={javaLangMergeSortCode}\n      />\n\n      <h3>Characteristics:</h3>\n      <ul>\n        <li>Stable sorting algorithm.</li>\n        <li>Efficient for large datasets.</li>\n        <li>Complexity: O(n log n) for all cases (best, average, worst).</li>\n        <li>Requires additional memory for temporary arrays.</li>\n      </ul>\n\n      <h3>Complexity:</h3>\n      <ul>\n        <li>Time Complexity: O(n log n)</li>\n        <li>Space Complexity: O(n)</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default MergeSort;\n","\nimport React, { useState, useEffect } from \"react\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism.css\";\nimport \"prismjs/components/prism-c\"; // Import the 'c' component for C language support\nimport \"./buttongroup.css\";\n\nfunction ButtonGroup({ handleLanguageChange, cLangElements, javaLangElements }) {\n  const [language, setLanguage] = useState(\"c\");\n  const [copyStatus, setCopyStatus] = useState(\"\");\n\n  const copyToClipboard = () => {\n    const codeToCopy =\n      (language === \"c\" ? cLangElements : javaLangElements).join(\"\\n\");\n    navigator.clipboard\n      .writeText(codeToCopy)\n      .then(() => {\n        setCopyStatus(\"Copied..!\");\n        setTimeout(() => {\n          setCopyStatus(\"\");\n        }, 1000);\n      })\n      .catch(() => setCopyStatus(\"Copy Failed\"));\n  };\n\n  useEffect(() => {\n    Prism.highlightAll(); \n  }, [cLangElements, javaLangElements]);\n\n  const renderSyntax = (selectedLangElements) => {\n    return (\n      <div className=\"code-section\">\n        <div className=\"copy-button-container\">\n          <button\n            className={`copy-button ${copyStatus && \"copied\"}`}\n            onClick={copyToClipboard}\n          >\n            {copyStatus || \"Copy Code\"}\n          </button>\n        </div>\n        <pre className={`language-c`}>\n          <code className={`language-c`}>\n            {selectedLangElements.join(\"\\n\")}\n          </code>\n        </pre>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"button-group\">\n        <button\n          className={`btnC ${language === \"c\" ? \"active\" : \"\"}`}\n          onClick={() => {\n            setLanguage(\"c\");\n            handleLanguageChange(\"c\");\n          }}\n        >\n          C\n        </button>\n        <button\n          className={`btnJava ${language === \"java\" ? \"active\" : \"\"}`}\n          onClick={() => {\n            setLanguage(\"java\");\n            handleLanguageChange(\"java\");\n          }}\n        >\n          Java\n        </button>\n      </div>\n      <div className=\"code-section-container\">\n        {renderSyntax(language === \"c\" ? cLangElements : javaLangElements )\n}\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonGroup; \n","(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// full package (optional) + parent classes (optional)\n\tvar classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the java naming conventions\n\tvar className = {\n\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\./\n\t\t}\n\t};\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'string': {\n\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables, parameters, and constructor references\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// class names based on keyword\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'constant': /\\b[A-Z][A-Z_\\d]+\\b/\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t\t'import': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'static',\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'static': /\\b\\w+$/,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n"],"names":["useEffect","Prism","_jsxs","className","children","_jsx","ButtonGroup","handleLanguageChange","language","concat","cLangElements","javaLangElements","_ref","setLanguage","useState","copyStatus","setCopyStatus","copyToClipboard","codeToCopy","join","navigator","clipboard","writeText","then","setTimeout","catch","onClick","selectedLangElements","keywords","classNamePrefix","source","pattern","RegExp","lookbehind","inside","languages","java","extend","greedy","clike","function","insertBefore","alias","namespace","replace"],"sourceRoot":""}