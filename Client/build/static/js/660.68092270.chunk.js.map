{"version":3,"file":"static/js/660.68092270.chunk.js","mappings":"yMA6QA,QAvQA,WAEE,MAAMA,EAAwB,CAC5B,2BACA,+CACA,2CACA,8BACA,oCACA,gDACA,8BACA,QACA,mEACA,4BACA,kDACA,2CACA,4CACA,YACA,QACA,kEACA,iCACA,6BACA,6CACA,oCACA,uBACA,qCACA,mCACA,iCACA,gBACA,YACA,iCACA,kCACA,4BACA,wBACA,QACA,2DACA,2CACA,8CACA,YACA,gCACA,QACA,KAIIC,EAAqB,CACzB,qBACA,8BACA,mCACA,IACA,gDACA,6BACA,yBACA,yCACA,gCACA,2CACA,YACA,QACA,qCACA,sBACA,IACA,iDACA,wBACA,8CACA,uCACA,wCACA,QACA,IACA,yCACA,qCACA,iCACA,qBACA,IACA,eACA,uCACA,4CACA,gCACA,mCACA,0BACA,gBACA,MAGFC,EAAAA,EAAAA,YAAU,KAERC,IAAAA,cAAoB,GACnB,IACH,MAAMC,EAAe,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,IAE/BC,EAAOC,IAAYC,EAAAA,EAAAA,UAASH,IAC5BI,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,IACxCK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,KACxCO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAS,OACtCS,EAAeC,IAAoBV,EAAAA,EAAAA,UAAS,OAC5CW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,IAG7Ca,EAAYA,CAACC,EAAKC,EAAKC,EAAMf,KACjC,GAAIc,EAAMC,EAAM,CACd,MAAMC,EAAKC,EAAUJ,EAAKC,EAAKC,EAAMf,GACrCY,EAAUC,EAAKC,EAAKE,EAAK,EAAGhB,GAC5BY,EAAUC,EAAKG,EAAK,EAAGD,EAAMf,GAC7BW,EAAiB,IAAID,EAAeM,GACtC,GAIIC,EAAYA,CAACJ,EAAKC,EAAKC,EAAMf,KACjC,IAAIkB,EAAQL,EAAIE,GAChBR,EAAcQ,GAEd,IAAII,EAAIL,EAAM,EACdd,EAAMoB,KAAK,CACTvB,MAAO,IAAIgB,GACXQ,QAAQ,oCAADC,OAAsCJ,GAC7CZ,WAAYS,EACZP,cAAe,OAGjB,IAAK,IAAIe,EAAIT,EAAKS,EAAIR,EAAMQ,IAC1Bd,EAAiBc,GACjBvB,EAAMoB,KAAK,CACTvB,MAAO,IAAIgB,GACXQ,QAAQ,aAADC,OAAeT,EAAIU,GAAE,iBAAAD,OAAgBJ,EAAK,KACjDZ,WAAYS,EACZP,cAAee,IAGbV,EAAIU,GAAKL,IACXC,KACCN,EAAIM,GAAIN,EAAIU,IAAM,CAACV,EAAIU,GAAIV,EAAIM,IAChCnB,EAAMoB,KAAK,CACTvB,MAAO,IAAIgB,GACXQ,QAAQ,WAADC,OAAaT,EAAIM,GAAE,SAAAG,OAAQT,EAAIU,IACtCjB,WAAYS,EACZP,cAAee,KAYrB,OARCV,EAAIM,EAAI,GAAIN,EAAIE,IAAS,CAACF,EAAIE,GAAOF,EAAIM,EAAI,IAC9CnB,EAAMoB,KAAK,CACTvB,MAAO,IAAIgB,GACXQ,QAAQ,iBAADC,OAAmBJ,EAAK,6BAC/BZ,WAAYa,EAAI,EAChBX,cAAe,OAGVW,EAAI,CAAC,EAyBd,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sBAAqBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,8BACJE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kBAAiBD,SAC7B7B,EAAMgC,KAAI,CAACC,EAAOC,KACjBH,EAAAA,EAAAA,KAAA,OAEED,UAAU,YACVK,MAAO,CACLC,OAAO,GAADX,OAAa,GAARQ,EAAU,MACrBI,gBACExB,EAAcyB,SAASJ,GACnB,QACAA,IAAUzB,EACV,SACAyB,IAAUvB,EACV,SACA,aACNkB,SAEDI,GAdIC,QAkBXH,EAAAA,EAAAA,KAAA,UAAQQ,QA9CSC,KACnB,IAAIC,EAAa,GACbC,EAAU,IAAI3C,GAClBgB,EAAU2B,EAAS,EAAGA,EAAQC,OAAS,EAAGF,GAC1CrC,EAASqC,GACTnC,EAAe,GACfE,EAAeiC,EAAW,GAAGjB,SAC7BV,EAAiB,GAAG,EAuCYe,SAAC,mBAC/BE,EAAAA,EAAAA,KAAA,UAAQQ,QApCKK,KACXvC,EAAcF,EAAMwC,OAAS,IAC/BrC,EAAeD,EAAc,GAC7BJ,EAASE,EAAME,EAAc,GAAGL,OAChCQ,EAAeL,EAAME,EAAc,GAAGmB,SACtCd,EAAcP,EAAME,EAAc,GAAGI,YACrCG,EAAiBT,EAAME,EAAc,GAAGM,eAC1C,EA6B6BkC,SAAUxC,GAAeF,EAAMwC,OAAS,EAAEd,SAAC,eAGtEF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EACpCE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,kBACJE,EAAAA,EAAAA,KAAA,KAAAF,SAAItB,WAIZoB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EAC1BE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,gBACJE,EAAAA,EAAAA,KAAA,KAAAF,SAAG,0SAIHE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,gBACJF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,oBAAwB,4EACpCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,yBAA6B,mIACzCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,uBAA2B,2GAGzCE,EAAAA,EAAAA,KAACe,EAAAA,EAAW,CACVC,qBAAuBC,GAAaC,QAAQC,IAAI,sBAADzB,OAAuBuB,IACtEG,cAAevD,EACfwD,iBAAkBzD,KAGpBoC,EAAAA,EAAAA,KAAA,MAAAF,SAAI,sBACJF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,kDACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,4CACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,2FAGNE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,iBACJF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,eAAmB,kBAC/BF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,kBAAsB,kBAClCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,gBAAoB,mGAChCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,sBAA0B,iDAGxCF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,2BACJE,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,QAAMD,UAAU,gBAAeD,SAC5BlC,EAAsB0D,KAAK,cAKlC1B,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,wBACJE,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,QAAMD,UAAU,aAAYD,SACzBjC,EAAmByD,KAAK,kBAO/B,C,2GC5LA,QAxEA,SAAoBC,GAA6D,IAA5D,qBAAEP,EAAoB,cAAEI,EAAa,iBAAEC,GAAkBE,EAC5E,MAAON,EAAUO,IAAerD,EAAAA,EAAAA,UAAS,MAClCsD,EAAYC,IAAiBvD,EAAAA,EAAAA,UAAS,IAEvCwD,EAAkBA,KACtB,MAAMC,GACU,MAAbX,EAAmBG,EAAgBC,GAAkBC,KAAK,MAC7DO,UAAUC,UACPC,UAAUH,GACVI,MAAK,KACJN,EAAc,aACdO,YAAW,KACTP,EAAc,GAAG,GAChB,IAAK,IAETQ,OAAM,IAAMR,EAAc,gBAAe,EA2B9C,OAxBA5D,EAAAA,EAAAA,YAAU,KACRC,IAAAA,cAAoB,GACnB,CAACqD,EAAeC,KAuBjBzB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EAC3BE,EAAAA,EAAAA,KAAA,UACED,UAAS,QAAAL,OAAuB,MAAbuB,EAAmB,SAAW,IACjDT,QAASA,KACPgB,EAAY,KACZR,EAAqB,IAAI,EACzBlB,SACH,OAGDE,EAAAA,EAAAA,KAAA,UACED,UAAS,WAAAL,OAA0B,SAAbuB,EAAsB,SAAW,IACvDT,QAASA,KACPgB,EAAY,QACZR,EAAqB,OAAO,EAC5BlB,SACH,aAIHE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,yBAAwBD,UA1CrBqC,EA2CW,MAAblB,EAAmBG,EAAgBC,GAzCnDzB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EAC3BE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,wBAAuBD,UACpCE,EAAAA,EAAAA,KAAA,UACED,UAAS,eAAAL,OAAiB+B,GAAc,UACxCjB,QAASmB,EAAgB7B,SAExB2B,GAAc,iBAGnBzB,EAAAA,EAAAA,KAAA,OAAKD,UAAS,aAAeD,UAC3BE,EAAAA,EAAAA,KAAA,QAAMD,UAAS,aAAeD,SAC3BqC,EAAqBb,KAAK,mBAbfa,KAgDxB,C,aC7EC,SAAUpE,GAEV,IAAIqE,EAAW,mfAGXC,EAAkB,6CAA6CC,OAG/DvC,EAAY,CACfwC,QAASC,OAAO,aAAaF,OAASD,EAAkB,gCAAgCC,QACxFG,YAAY,EACZC,OAAQ,CACP,UAAa,CACZH,QAAS,2CACTG,OAAQ,CACP,YAAe,OAGjB,YAAe,OAIjB3E,EAAM4E,UAAUC,KAAO7E,EAAM4E,UAAUE,OAAO,QAAS,CACtD,OAAU,CACTN,QAAS,iCACTE,YAAY,EACZK,QAAQ,GAET,aAAc,CACb/C,EACA,CAGCwC,QAASC,OAAO,aAAaF,OAASD,EAAkB,+DAA+DC,QACvHG,YAAY,EACZC,OAAQ3C,EAAU2C,QAEnB,CAGCH,QAASC,OAAO,kFAAkFF,OAASD,EAAkB,aAAaC,QAC1IG,YAAY,EACZC,OAAQ3C,EAAU2C,SAGpB,QAAWN,EACX,SAAY,CACXrE,EAAM4E,UAAUI,MAAMC,SACtB,CACCT,QAAS,mBACTE,YAAY,IAGd,OAAU,8IACV,SAAY,CACXF,QAAS,wEACTE,YAAY,GAEb,SAAY,uBAGb1E,EAAM4E,UAAUM,aAAa,OAAQ,SAAU,CAC9C,uBAAwB,CAEvBV,QAAS,iDACTO,QAAQ,EACRI,MAAO,UAER,KAAQ,CACPX,QAAS,4BACTO,QAAQ,KAIV/E,EAAM4E,UAAUM,aAAa,OAAQ,aAAc,CAClD,WAAc,CACbV,QAAS,+BACTE,YAAY,EACZS,MAAO,eAER,SAAY,CACXX,QAAS,kGACTG,OAAQ,CACP,aAAc3C,EACd,QAAWqC,EACX,YAAe,YACf,SAAY,UAGd,OAAU,CACT,CACCG,QAASC,OAAO,gBAAgBF,OAASD,EAAkB,0BAA0BC,QACrFG,YAAY,EACZC,OAAQ,CACP,UAAa3C,EAAU2C,OAAOS,UAC9B,YAAe,KACf,SAAY,KACZ,aAAc,QAGhB,CACCZ,QAASC,OAAO,yBAAyBF,OAASD,EAAkB,qBAAqBC,QACzFG,YAAY,EACZS,MAAO,SACPR,OAAQ,CACP,UAAa3C,EAAU2C,OAAOS,UAC9B,OAAU,SACV,YAAe,KACf,SAAY,KACZ,aAAc,SAIjB,UAAa,CACZZ,QAASC,OACR,qJACEF,OAAOc,QAAQ,cAAc,WAAc,OAAOhB,EAASE,MAAQ,KACtEG,YAAY,EACZC,OAAQ,CACP,YAAe,QAIlB,CA3HA,CA2HC3E,M","sources":["Learning/DSA/QuickSort.jsx","Learning/buttonGroup.js","../node_modules/prismjs/components/prism-java.js"],"sourcesContent":["import React, { useState ,useEffect } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-java';\nimport ButtonGroup from '../buttonGroup'; \nfunction QuickSort() {\n\n  const javaLangQuickSortCode = [\n    \"public class QuickSort {\",\n    \"    public static void main(String[] args) {\",\n    \"        int[] arr = {10, 7, 8, 9, 1, 5};\",\n    \"        int n = arr.length;\",\n    \"        quickSort(arr, 0, n - 1);\",\n    \"        System.out.println(\\\"Sorted array: \\\");\",\n    \"        printArray(arr, n);\",\n    \"    }\",\n    \"    public static void quickSort(int[] arr, int low, int high) {\",\n    \"        if (low < high) {\",\n    \"            int pi = partition(arr, low, high);\",\n    \"            quickSort(arr, low, pi - 1);\",\n    \"            quickSort(arr, pi + 1, high);\",\n    \"        }\",\n    \"    }\",\n    \"    public static int partition(int[] arr, int low, int high) {\",\n    \"        int pivot = arr[high];\",\n    \"        int i = (low - 1);\",\n    \"        for (int j = low; j < high; j++) {\",\n    \"            if (arr[j] < pivot) {\",\n    \"                i++;\",\n    \"                int temp = arr[i];\",\n    \"                arr[i] = arr[j];\",\n    \"                arr[j] = temp;\",\n    \"            }\",\n    \"        }\",\n    \"        int temp = arr[i + 1];\",\n    \"        arr[i + 1] = arr[high];\",\n    \"        arr[high] = temp;\",\n    \"        return i + 1;\",\n    \"    }\",\n    \"    public static void printArray(int[] arr, int size) {\",\n    \"        for (int i = 0; i < size; i++) {\",\n    \"            System.out.print(arr[i] + \\\" \\\");\",\n    \"        }\",\n    \"        System.out.println();\",\n    \"    }\",\n    \"}\"\n  ];\n\n  // C code for Quick Sort\n  const cLangQuickSortCode = [\n    \"#include <stdio.h>\",\n    \"void swap(int* a, int* b) {\",\n    \"    int t = *a; *a = *b; *b = t;\",\n    \"}\",\n    \"int partition(int arr[], int low, int high) {\",\n    \"    int pivot = arr[high];\",\n    \"    int i = (low - 1);\",\n    \"    for (int j = low; j < high; j++) {\",\n    \"        if (arr[j] < pivot) {\",\n    \"            i++; swap(&arr[i], &arr[j]);\",\n    \"        }\",\n    \"    }\",\n    \"    swap(&arr[i + 1], &arr[high]);\",\n    \"    return (i + 1);\",\n    \"}\",\n    \"void quickSort(int arr[], int low, int high) {\",\n    \"    if (low < high) {\",\n    \"        int pi = partition(arr, low, high);\",\n    \"        quickSort(arr, low, pi - 1);\",\n    \"        quickSort(arr, pi + 1, high);\",\n    \"    }\",\n    \"}\",\n    \"void printArray(int arr[], int size) {\",\n    \"    for (int i = 0; i < size; i++)\",\n    \"        printf(\\\"%d \\\", arr[i]);\",\n    \"    printf(\\\"\\\\n\\\");\",\n    \"}\",\n    \"int main() {\",\n    \"    int arr[] = {10, 7, 8, 9, 1, 5};\",\n    \"    int n = sizeof(arr) / sizeof(arr[0]);\",\n    \"    quickSort(arr, 0, n - 1);\",\n    \"    printf(\\\"Sorted array: \\\\n\\\");\",\n    \"    printArray(arr, n);\",\n    \"    return 0;\",\n    \"}\"\n  ];\n\n  useEffect(() => {\n    // Highlight code using Prism when the component is mounted or updated\n    Prism.highlightAll();\n  }, []);\n  const initialArray = [10, 7, 8, 9, 1, 5];\n\n  const [array, setArray] = useState(initialArray);\n  const [steps, setSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [explanation, setExplanation] = useState('');\n  const [pivotIndex, setPivotIndex] = useState(null);\n  const [comparedIndex, setComparedIndex] = useState(null);\n  const [sortedIndices, setSortedIndices] = useState([]);\n\n  // Quick Sort with step-by-step visuals and explanations\n  const quickSort = (arr, low, high, steps) => {\n    if (low < high) {\n      const pi = partition(arr, low, high, steps);\n      quickSort(arr, low, pi - 1, steps); // Sort left half\n      quickSort(arr, pi + 1, high, steps); // Sort right half\n      setSortedIndices([...sortedIndices, pi]); // Mark pivot as sorted\n    }\n  };\n\n  // Partition function with steps and visuals for each loop iteration\n  const partition = (arr, low, high, steps) => {\n    let pivot = arr[high];\n    setPivotIndex(high); // Mark the pivot index\n\n    let i = low - 1;\n    steps.push({\n      array: [...arr],\n      message: `New iteration: Pivot selected as ${pivot}`,\n      pivotIndex: high,\n      comparedIndex: null,\n    });\n\n    for (let j = low; j < high; j++) {\n      setComparedIndex(j); // Mark the index being compared\n      steps.push({\n        array: [...arr],\n        message: `Comparing ${arr[j]} with pivot (${pivot})`,\n        pivotIndex: high,\n        comparedIndex: j,\n      });\n\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]]; // Swap if element is less than pivot\n        steps.push({\n          array: [...arr],\n          message: `Swapped ${arr[i]} and ${arr[j]}`,\n          pivotIndex: high,\n          comparedIndex: j,\n        });\n      }\n    }\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]]; // Place pivot in its correct position\n    steps.push({\n      array: [...arr],\n      message: `Placed pivot (${pivot}) in its correct position`,\n      pivotIndex: i + 1,\n      comparedIndex: null,\n    });\n\n    return i + 1;\n  };\n\n  // Initialize sorting steps when component is rendered\n  const startSorting = () => {\n    let stepsArray = [];\n    let arrCopy = [...initialArray];\n    quickSort(arrCopy, 0, arrCopy.length - 1, stepsArray);\n    setSteps(stepsArray);\n    setCurrentStep(0);\n    setExplanation(stepsArray[0].message);\n    setSortedIndices([]); // Reset sorted elements\n  };\n\n  // Proceed to the next step\n  const nextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n      setArray(steps[currentStep + 1].array);\n      setExplanation(steps[currentStep + 1].message);\n      setPivotIndex(steps[currentStep + 1].pivotIndex);\n      setComparedIndex(steps[currentStep + 1].comparedIndex);\n    }\n  };\n\n  return (\n    <>\n    <div className=\"QuickSort-container\">\n      <h2>Quick Sort Visualization</h2>\n      <div className=\"array-container\">\n        {array.map((value, index) => (\n          <div\n            key={index}\n            className=\"array-bar\"\n            style={{\n              height: `${value * 10}px`,\n              backgroundColor:\n                sortedIndices.includes(index)\n                  ? 'green' // Mark sorted elements in green\n                  : index === pivotIndex\n                  ? 'yellow' // Mark the pivot element in yellow\n                  : index === comparedIndex\n                  ? 'orange' // Mark the currently compared element in orange\n                  : 'lightblue', // Default color\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n      <button onClick={startSorting}>Start Sorting</button>\n      <button onClick={nextStep} disabled={currentStep >= steps.length - 1}>\n        Next Step\n      </button>\n      <div className=\"explanation-container\">\n        <h3>Explanation:</h3>\n        <p>{explanation}</p>\n      </div>\n    </div>\n\n<div className=\"QuickSort\">\n<h2>Quick Sort</h2>\n<p>\n  Quick sort is a highly efficient sorting algorithm and is based on partitioning an array into smaller sub-arrays. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot.\n</p>\n\n<h3>Algorithm:</h3>\n<ol>\n  <li><strong>Choose a pivot:</strong> Select an element as a pivot (e.g., first, last, or middle element).</li>\n  <li><strong>Partition the array:</strong> Rearrange the array so that elements less than the pivot are on the left and those greater than the pivot are on the right.</li>\n  <li><strong>Recursively apply:</strong> Apply the same logic to the left and right sub-arrays until each sub-array has only one element.</li>\n</ol>\n\n<ButtonGroup\n  handleLanguageChange={(language) => console.log(`Selected language: ${language}`)}\n  cLangElements={cLangQuickSortCode}\n  javaLangElements={javaLangQuickSortCode}\n/>\n\n<h3>Characteristics:</h3>\n<ul>\n  <li>Quick sort is an in-place sorting algorithm.</li>\n  <li>It uses a divide-and-conquer strategy.</li>\n  <li>Efficient on average, but worst-case performance occurs with poorly chosen pivots.</li>\n</ul>\n\n<h3>Complexity:</h3>\n<ul>\n  <li><strong>Best Case:</strong> O(n log n)</li>\n  <li><strong>Average Case:</strong> O(n log n)</li>\n  <li><strong>Worst Case:</strong> O(n²) - This happens when the smallest or largest element is always picked as the pivot.</li>\n  <li><strong>Space Complexity:</strong> O(log n) - due to the recursive stack.</li>\n</ul>\n\n<div>\n  <h3>Java Quick Sort Code:</h3>\n  <pre>\n    <code className=\"language-java\">\n      {javaLangQuickSortCode.join('\\n')}\n    </code>\n  </pre>\n</div>\n\n<div>\n  <h3>C Quick Sort Code:</h3>\n  <pre>\n    <code className=\"language-c\">\n      {cLangQuickSortCode.join('\\n')}\n    </code>\n  </pre>\n</div>\n</div>\n</>\n  );\n}\n\nexport default QuickSort;\n","\nimport React, { useState, useEffect } from \"react\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism.css\";\nimport \"prismjs/components/prism-c\"; // Import the 'c' component for C language support\nimport \"./buttongroup.css\";\n\nfunction ButtonGroup({ handleLanguageChange, cLangElements, javaLangElements }) {\n  const [language, setLanguage] = useState(\"c\");\n  const [copyStatus, setCopyStatus] = useState(\"\");\n\n  const copyToClipboard = () => {\n    const codeToCopy =\n      (language === \"c\" ? cLangElements : javaLangElements).join(\"\\n\");\n    navigator.clipboard\n      .writeText(codeToCopy)\n      .then(() => {\n        setCopyStatus(\"Copied..!\");\n        setTimeout(() => {\n          setCopyStatus(\"\");\n        }, 1000);\n      })\n      .catch(() => setCopyStatus(\"Copy Failed\"));\n  };\n\n  useEffect(() => {\n    Prism.highlightAll(); \n  }, [cLangElements, javaLangElements]);\n\n  const renderSyntax = (selectedLangElements) => {\n    return (\n      <div className=\"code-section\">\n        <div className=\"copy-button-container\">\n          <button\n            className={`copy-button ${copyStatus && \"copied\"}`}\n            onClick={copyToClipboard}\n          >\n            {copyStatus || \"Copy Code\"}\n          </button>\n        </div>\n        <pre className={`language-c`}>\n          <code className={`language-c`}>\n            {selectedLangElements.join(\"\\n\")}\n          </code>\n        </pre>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"button-group\">\n        <button\n          className={`btnC ${language === \"c\" ? \"active\" : \"\"}`}\n          onClick={() => {\n            setLanguage(\"c\");\n            handleLanguageChange(\"c\");\n          }}\n        >\n          C\n        </button>\n        <button\n          className={`btnJava ${language === \"java\" ? \"active\" : \"\"}`}\n          onClick={() => {\n            setLanguage(\"java\");\n            handleLanguageChange(\"java\");\n          }}\n        >\n          Java\n        </button>\n      </div>\n      <div className=\"code-section-container\">\n        {renderSyntax(language === \"c\" ? cLangElements : javaLangElements )\n}\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonGroup; \n","(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// full package (optional) + parent classes (optional)\n\tvar classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the java naming conventions\n\tvar className = {\n\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\./\n\t\t}\n\t};\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'string': {\n\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables, parameters, and constructor references\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// class names based on keyword\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'constant': /\\b[A-Z][A-Z_\\d]+\\b/\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t\t'import': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'static',\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'static': /\\b\\w+$/,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n"],"names":["javaLangQuickSortCode","cLangQuickSortCode","useEffect","Prism","initialArray","array","setArray","useState","steps","setSteps","currentStep","setCurrentStep","explanation","setExplanation","pivotIndex","setPivotIndex","comparedIndex","setComparedIndex","sortedIndices","setSortedIndices","quickSort","arr","low","high","pi","partition","pivot","i","push","message","concat","j","_jsxs","_Fragment","children","className","_jsx","map","value","index","style","height","backgroundColor","includes","onClick","startSorting","stepsArray","arrCopy","length","nextStep","disabled","ButtonGroup","handleLanguageChange","language","console","log","cLangElements","javaLangElements","join","_ref","setLanguage","copyStatus","setCopyStatus","copyToClipboard","codeToCopy","navigator","clipboard","writeText","then","setTimeout","catch","selectedLangElements","keywords","classNamePrefix","source","pattern","RegExp","lookbehind","inside","languages","java","extend","greedy","clike","function","insertBefore","alias","namespace","replace"],"sourceRoot":""}