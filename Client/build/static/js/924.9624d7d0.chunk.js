(self.webpackChunkmyapp=self.webpackChunkmyapp||[]).push([[924],{9008:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});t(2791);var r=t(2230),i=(t(1293),t(7862),t(9402),t(8372),t(184));const a=function(){return(0,i.jsxs)("div",{className:"Insertionsort-container",children:[(0,i.jsx)("h2",{children:"Insertion Sort"}),(0,i.jsx)("p",{children:"Insertion sort is a simple sorting algorithm that iterates through an array, gradually building a sorted sequence. It repeatedly takes one element at a time and inserts it into its proper position in the sorted part of the array."}),(0,i.jsx)("h2",{children:"Algorithm:"}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Start with the second element (index 1) of the array."}),(0,i.jsx)("li",{children:"Compare it with the first element."}),(0,i.jsx)("ul",{children:(0,i.jsx)("li",{children:"If it's smaller, swap them."})}),(0,i.jsx)("li",{children:"Move to the third element (index 2) and insert it into its correct position among the first three elements."}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:"Compare with the second element and swap if needed."}),(0,i.jsx)("li",{children:"Compare with the first element and swap if needed."})]}),(0,i.jsx)("li",{children:"Continue this process for each element in the array."}),(0,i.jsx)("li",{children:"Insert each element into its proper place among the sorted elements to its left."}),(0,i.jsx)("li",{children:"The array is sorted when all elements are in their correct positions."})]}),(0,i.jsx)(r.Z,{handleLanguageChange:e=>" ".concat(e),cLangElements:["#include <stdio.h>","","void insertionSort(int arr[], int n) {","    int i, key, j;","    for (i = 1; i < n; i++) {","        key = arr[i];","        j = i - 1;","","        // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position","        while (j >= 0 && arr[j] > key) {","            arr[j + 1] = arr[j];","            j = j - 1;","        }","        arr[j + 1] = key;","    }","}","","void printArray(int arr[], int size) {","    int i;","    for (i = 0; i < size; i++)",'        printf("%d ", arr[i]);','    printf("\\n");',"}","","int main() {","    int arr[] = {12, 11, 13, 5, 6};","    int n = sizeof(arr) / sizeof(arr[0]);","",'    printf("Original array: \\n");',"    printArray(arr, n);","","    insertionSort(arr, n);","",'    printf("Sorted array: \\n");',"    printArray(arr, n);","","    return 0;","}"],javaLangElements:["public class InsertionSort {","    // Function to perform insertion sort","    static void insertionSort(int arr[], int n) {","        int i, key, j;","        for (i = 1; i < n; i++) {","            key = arr[i];","            j = i - 1;","","            // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position","            while (j >= 0 && arr[j] > key) {","                arr[j + 1] = arr[j];","                j = j - 1;","            }","            arr[j + 1] = key;","        }","    }","","    // Function to print an array","    static void printArray(int arr[], int size) {","        for (int i = 0; i < size; i++)",'            System.out.print(arr[i] + " ");',"        System.out.println();","    }","","    public static void main(String[] args) {","        int arr[] = {12, 11, 13, 5, 6};","        int n = arr.length;","",'        System.out.println("Original array: ");',"        printArray(arr, n);","","        insertionSort(arr, n);","",'        System.out.println("Sorted array: ");',"        printArray(arr, n);","    }","}"]}),(0,i.jsx)("h2",{children:"Time Complexity"}),(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Worst Case (O(n^2)):"})," In the worst case, each element in the unsorted array needs to be compared and potentially swapped with every other element, resulting in a quadratic time complexity of O(n^2)."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Best Case (O(n)):"})," In the best case, when the array is already sorted, only one pass through the array is needed, and each element is compared to its predecessor once, leading to a linear time complexity of O(n)."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Average Case (O(n^2)):"})," On average, insertion sort requires approximately n^2/4 comparisons and n^2/4 swaps, resulting in a quadratic time complexity of O(n^2)."]})]})}},2230:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(2791),i=t(1293),a=t.n(i),s=(t(7862),t(9402),t(184));const o=function(e){let{handleLanguageChange:n,cLangElements:t,javaLangElements:i}=e;const[o,c]=(0,r.useState)("c"),[l,d]=(0,r.useState)(""),p=()=>{const e=("c"===o?t:i).join("\n");navigator.clipboard.writeText(e).then((()=>{d("Copied..!"),setTimeout((()=>{d("")}),1e3)})).catch((()=>d("Copy Failed")))};return(0,r.useEffect)((()=>{a().highlightAll()}),[t,i]),(0,s.jsxs)("div",{className:"container",children:[(0,s.jsxs)("div",{className:"button-group",children:[(0,s.jsx)("button",{className:"btnC ".concat("c"===o?"active":""),onClick:()=>{c("c"),n("c")},children:"C"}),(0,s.jsx)("button",{className:"btnJava ".concat("java"===o?"active":""),onClick:()=>{c("java"),n("java")},children:"Java"})]}),(0,s.jsx)("div",{className:"code-section-container",children:(h="c"===o?t:i,(0,s.jsxs)("div",{className:"code-section",children:[(0,s.jsx)("div",{className:"copy-button-container",children:(0,s.jsx)("button",{className:"copy-button ".concat(l&&"copied"),onClick:p,children:l||"Copy Code"})}),(0,s.jsx)("pre",{className:"language-c",children:(0,s.jsx)("code",{className:"language-c",children:h.join("\n")})})]}))})]});var h}},8372:()=>{!function(e){var n=/\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/,t=/(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source,r={pattern:RegExp(/(^|[^\w.])/.source+t+/[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),lookbehind:!0,inside:{namespace:{pattern:/^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,inside:{punctuation:/\./}},punctuation:/\./}};e.languages.java=e.languages.extend("clike",{string:{pattern:/(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,lookbehind:!0,greedy:!0},"class-name":[r,{pattern:RegExp(/(^|[^\w.])/.source+t+/[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/.source),lookbehind:!0,inside:r.inside},{pattern:RegExp(/(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/.source+t+/[A-Z]\w*\b/.source),lookbehind:!0,inside:r.inside}],keyword:n,function:[e.languages.clike.function,{pattern:/(::\s*)[a-z_]\w*/,lookbehind:!0}],number:/\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0},constant:/\b[A-Z][A-Z_\d]+\b/}),e.languages.insertBefore("java","string",{"triple-quoted-string":{pattern:/"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,greedy:!0,alias:"string"},char:{pattern:/'(?:\\.|[^'\\\r\n]){1,6}'/,greedy:!0}}),e.languages.insertBefore("java","class-name",{annotation:{pattern:/(^|[^.])@\w+(?:\s*\.\s*\w+)*/,lookbehind:!0,alias:"punctuation"},generics:{pattern:/<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,inside:{"class-name":r,keyword:n,punctuation:/[<>(),.:]/,operator:/[?&|]/}},import:[{pattern:RegExp(/(\bimport\s+)/.source+t+/(?:[A-Z]\w*|\*)(?=\s*;)/.source),lookbehind:!0,inside:{namespace:r.inside.namespace,punctuation:/\./,operator:/\*/,"class-name":/\w+/}},{pattern:RegExp(/(\bimport\s+static\s+)/.source+t+/(?:\w+|\*)(?=\s*;)/.source),lookbehind:!0,alias:"static",inside:{namespace:r.inside.namespace,static:/\b\w+$/,punctuation:/\./,operator:/\*/,"class-name":/\w+/}}],namespace:{pattern:RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g,(function(){return n.source}))),lookbehind:!0,inside:{punctuation:/\./}}})}(Prism)}}]);
//# sourceMappingURL=924.9624d7d0.chunk.js.map