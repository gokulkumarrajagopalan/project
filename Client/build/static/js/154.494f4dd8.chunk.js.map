{"version":3,"file":"static/js/154.494f4dd8.chunk.js","mappings":"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","sources":["Learning/InterviewQA/JAVA_Preparation.js"],"sourcesContent":["import React from 'react';\nimport { Helmet } from \"react-helmet\";\n\nconst JAVA_Preparation = () => {\n  return (\n    <div>\n\n<Helmet>\n      <title>50 Important Java Interview Questions - GDest</title>\n      <meta\n        name=\"description\"\n        content=\"Prepare for your Java interview with key concepts, platform independence, features of Java, and more.\"\n      />\n      <meta\n        name=\"keywords\"\n        content=\"Java interview preparation,Java interview questions ,Java interview questions in Gdest,Java interview questions in Gdestin, Java interview questions for fresher , Java interview questions in javapoint ,Java interview questions in w3school , Java interview questions in tutorialspoint, Java interview questions in geeksforgeeks,object-oriented programming, multithreading , oops interview question \"\n      />\n      <meta property=\"og:title\" content=\"Java Interview Preparation - GDest\" />\n      <meta\n        property=\"og:description\"\n        content=\"Explore essential Java concepts, platform independence, and features for your interview preparation.\"\n      />\n      <meta property=\"og:url\" content=\"https://www.gdest.in/JAVA_Preparation\" />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta\n        property=\"og:image\"\n        content=\"https://www.gdest.in/Asset/Logo.jpg\"\n      />\n      <link rel=\"canonical\" href=\"https://www.gdest.in/JAVA_Preparation\" />\n    </Helmet>\n\n\n      <h1>Java Interview Preparation</h1>\n\n      <h2>1. Is Java Platform Independent? If yes, how?</h2>\n      <p>\n        Yes, Java is platform-independent because of the Java Virtual Machine (JVM). Java code is compiled into bytecode which can be executed by JVM on any platform (Windows, Linux, Mac, etc.), making Java platform-independent.\n      </p>\n\n      <h2>2. What are the top Java Features?</h2>\n      <ul>\n        <li>Platform Independent</li>\n        <li>Object-Oriented</li>\n        <li>Robust and Secure</li>\n        <li>Multithreaded</li>\n        <li>Portable</li>\n        <li>High Performance (with JIT)</li>\n        <li>Dynamic</li>\n      </ul>\n\n      <h2>3. What is JVM (Java Virtual Machine)?</h2>\n      <p>\n        JVM is an abstract machine that enables Java programs to run on any device or OS. It converts bytecode into machine-specific code.\n      </p>\n\n      <h2>4. What is JIT (Just-In-Time Compiler)?</h2>\n      <p>\n        JIT compiles bytecode into machine code at runtime, improving performance by converting code to native code only when needed.\n      </p>\n\n      <h2>5. Difference between JVM, JRE, and JDK</h2>\n      <h3>JVM:</h3>\n      <ul>\n        <li>Executes Java bytecode and converts it into machine-specific code.</li>\n        <li>Platform-dependent (different for different operating systems).</li>\n        <li>Responsible for memory management and garbage collection.</li>\n      </ul>\n      <h3>JRE (Java Runtime Environment):</h3>\n      <ul>\n        <li>Provides the libraries and other components necessary to run Java applications.</li>\n        <li>Includes the JVM and standard libraries (like java.lang, java.util).</li>\n        <li>Does not include development tools like compilers or debuggers.</li>\n      </ul>\n      <h3>JDK (Java Development Kit):</h3>\n      <ul>\n        <li>A complete development kit for Java, which includes JRE plus development tools such as the Java compiler (javac), debugger, and other tools.</li>\n        <li>Required for developing, compiling, and running Java applications.</li>\n        <li>Platform-specific, as it includes tools tailored for specific operating systems.</li>\n      </ul>\n\n      <h2>6. Explain public static void main(String args[]) in Java.</h2>\n      <p>\n        public: Accessible from anywhere.<br />\n        static: Can be called without an instance of the class.<br />\n        void: No return type.<br />\n        main: Entry point of the program.<br />\n        String[] args: Command-line arguments.\n      </p>\n\n      <h2>7. What is the Java String Pool?</h2>\n      <p>\n        The String Pool is a special memory area in Java where string literals are stored to optimize memory usage and improve performance.\n      </p>\n\n      <h2>8. Explain different data types in Java.</h2>\n      <p>\n        Primitive types: int, float, double, char, byte, short, long, boolean.<br />\n        Reference types: Objects, arrays, interfaces, classes.\n      </p>\n\n      <h2>9. What is the Wrapper class in Java? Why do we need wrapper classes?</h2>\n      <p>\n        Wrapper classes convert primitive types into objects (e.g., int to Integer). They are needed when working with collections like ArrayList, which can only store objects, not primitives.\n      </p>\n\n      <h2>10. Difference between instance and local variables.</h2>\n      <h3>Instance Variables:</h3>\n      <ul>\n        <li>Declared inside a class but outside methods.</li>\n        <li>Have a default value (0, null, etc.).</li>\n        <li>Exist as long as the object exists.</li>\n      </ul>\n      <h3>Local Variables:</h3>\n      <ul>\n        <li>Declared inside methods or constructors.</li>\n        <li>No default value. Must be initialized.</li>\n        <li>Exist only within the method.</li>\n      </ul>\n\n      <h2>11. What is a Class Variable and a Static Variable?</h2>\n      <p>\n        Class Variable: A variable declared inside the class and outside methods.<br />\n        Static Variable: A class variable that belongs to the class rather than instances. Shared among all instances.\n      </p>\n\n      <h2>12. What is the default value stored in Local Variables?</h2>\n      <p>\n        Local variables do not have default values. They must be initialized before use.\n      </p>\n\n      <h2>13. Explain the difference between System.out, System.err, and System.in.</h2>\n      <p>\n        System.out: Standard output stream (usually console).<br />\n        System.err: Standard error stream (used for error messages).<br />\n        System.in: Standard input stream (usually keyboard).\n      </p>\n\n      <h2>14. What is the difference between String, StringBuffer, and StringBuilder?</h2>\n      <h3>String:</h3>\n      <ul>\n        <li>Immutable: once created, the value cannot be changed.</li>\n        <li>Every modification creates a new String object, which can lead to memory inefficiency in case of frequent changes.</li>\n        <li>Thread-safe but slower due to the overhead of immutability.</li>\n      </ul>\n      <h3>StringBuffer:</h3>\n      <ul>\n        <li>Mutable: allows modifications without creating new objects.</li>\n        <li>Thread-safe (synchronized), which means it's suitable for use in multithreaded environments.</li>\n        <li>Performance is slower than StringBuilder due to synchronization overhead.</li>\n      </ul>\n      <h3>StringBuilder:</h3>\n      <ul>\n        <li>Mutable and designed for single-threaded scenarios, making it faster than StringBuffer.</li>\n        <li>Not thread-safe, so should be used when thread safety is not a concern.</li>\n      </ul>\n\n      <h2>15. Which among String or StringBuffer should be preferred for frequent updates?</h2>\n      <p>\n        StringBuffer or StringBuilder should be used for frequent updates because they are mutable.\n      </p>\n\n      <h2>16. What are the main concepts of OOPs in Java?</h2>\n      <ul>\n        <li>Inheritance</li>\n        <li>Polymorphism</li>\n        <li>Encapsulation</li>\n        <li>Abstraction</li>\n      </ul>\n\n      <h2>17. What is Inheritance, and what are the types of inheritance in Java?</h2>\n      <p>\n        Inheritance allows one class to inherit the properties and methods of another.<br />\n        Single Inheritance: One class inherits from one superclass.<br />\n        Multiple Inheritance (Interface-based): Implement multiple interfaces.\n      </p>\n\n      <h2>18. What is Polymorphism?</h2>\n      <p>\n        Polymorphism allows one object to take many forms, typically through method overloading and method overriding.\n      </p>\n\n      <h2>19. What is method overriding and method overloading?</h2>\n      <h3>Method Overloading:</h3>\n      <p>Same method name, different parameters (same class). Compile-time polymorphism.</p>\n      <h3>Method Overriding:</h3>\n      <p>Same method signature in subclass. Runtime polymorphism.</p>\n\n      <h2>20. Can we override the static method?</h2>\n      <p>No, static methods cannot be overridden because they belong to the class, not instances.</p>\n\n      <h2>21. What is an Interface?</h2>\n      <p>\n        Interface is a blueprint of a class. It can contain abstract methods and static constants. A class implements an interface.\n      </p>\n\n      <h2>22. Differences between abstract class and interface</h2>\n      <h3>Abstract Class:</h3>\n      <ul>\n        <li>Can have both abstract and non-abstract methods.</li>\n        <li>Can have constructors.</li>\n        <li>Supports single inheritance.</li>\n      </ul>\n      <h3>Interface:</h3>\n      <ul>\n        <li>Only abstract methods (before Java 8).</li>\n        <li>No constructors allowed.</li>\n        <li>Supports multiple inheritance.</li>\n      </ul>\n\n      <h2>23. What is Encapsulation, and its advantages?</h2>\n      <p>\n        Encapsulation hides the internal state of an object and only exposes a controlled interface. It helps in data protection and modularity.\n      </p>\n\n      <h2>24. What is the IS-A relationship in OOPs Java?</h2>\n      <p>\n        IS-A is a relationship through inheritance (e.g., a Dog IS-A Animal).\n      </p>\n\n      <h2>25. What is the HAS-A relationship in OOPs Java?</h2>\n      <p>\n        HAS-A is a relationship where one class contains references to another class (composition).\n      </p>\n\n      <h2>26. What are the access modifiers in Java?</h2>\n      <ul>\n        <li>public</li>\n        <li>private</li>\n        <li>protected</li>\n        <li>default (no modifier)</li>\n      </ul>\n\n      <h2>27. What is Exception Handling in Java?</h2>\n      <p>\n        Exception handling is a mechanism to handle runtime errors, allowing the program to continue its normal flow.\n      </p>\n\n      <h2>28. What are the types of exceptions in Java?</h2>\n      <ul>\n        <li>Checked Exceptions: Must be declared or handled (e.g., IOException).</li>\n        <li>Unchecked Exceptions: Do not need to be declared or handled (e.g., NullPointerException).</li>\n      </ul>\n\n      <h2>29. How do you create a custom exception?</h2>\n      <p>\n        By extending the Exception class or RuntimeException class to create a new exception type.\n      </p>\n\n      <h2>30. What is the finally block in Java?</h2>\n      <p>\n        The finally block executes after try-catch, regardless of whether an exception occurred or not. It's used for cleanup activities.\n      </p>\n\n      <h2>31. What is the use of the throw keyword?</h2>\n      <p>\n        The throw keyword is used to explicitly throw an exception.\n      </p>\n\n      <h2>32. What is the use of the throws keyword?</h2>\n      <p>\n        The throws keyword is used in method declarations to specify that a method can throw exceptions, allowing the caller to handle them.\n      </p>\n\n      <h2>33. Explain the Java Collections Framework.</h2>\n      <p>\n        The Java Collections Framework provides classes and interfaces for storing and manipulating groups of objects (e.g., List, Set, Map).\n      </p>\n\n      <h2>34. What is the difference between List, Set, and Map?</h2>\n      <h3>List:</h3>\n      <p>Ordered collection allowing duplicates (e.g., ArrayList, LinkedList).</p>\n      <h3>Set:</h3>\n      <p>Unordered collection that does not allow duplicates (e.g., HashSet, TreeSet).</p>\n      <h3>Map:</h3>\n      <p>Collection of key-value pairs (e.g., HashMap, TreeMap).</p>\n\n      <h2>35. What is the difference between ArrayList and LinkedList?</h2>\n      <h3>ArrayList:</h3>\n      <ul>\n        <li>Dynamic array implementation.</li>\n        <li>Faster for accessing elements (random access).</li>\n        <li>Slower for insertions/deletions (requires shifting).</li>\n      </ul>\n      <h3>LinkedList:</h3>\n      <ul>\n        <li>Node-based implementation.</li>\n        <li>Faster for insertions/deletions.</li>\n        <li>Slower for accessing elements (sequential access).</li>\n      </ul>\n\n      <h2>36. Explain the concepts of Thread in Java.</h2>\n      <p>\n        A thread is a lightweight process. Java supports multithreading, allowing multiple threads to run concurrently. Threads can be created by extending the Thread class or implementing the Runnable interface.\n      </p>\n\n      <h2>37. What is the difference between synchronized and non-synchronized methods?</h2>\n      <h3>Synchronized Method:</h3>\n      <p>Only one thread can execute at a time, ensuring thread safety.</p>\n      <h3>Non-synchronized Method:</h3>\n      <p>Multiple threads can execute simultaneously, potentially leading to data inconsistency.</p>\n\n      <h2>38. What is a deadlock?</h2>\n      <p>\n        A deadlock is a situation where two or more threads are blocked forever, waiting for each other to release resources.\n      </p>\n\n      <h2>39. What is the Executor Framework in Java?</h2>\n      <p>\n        The Executor Framework provides a higher-level API for managing threads and tasks, making it easier to work with concurrency.\n      </p>\n\n      <h2>40. What is Java 8's Stream API?</h2>\n      <p>\n        The Stream API allows functional-style operations on collections (like filtering, mapping, and reducing) to process data in a more declarative way.\n      </p>\n\n      <h2>41. What are Lambda Expressions?</h2>\n      <p>\n        Lambda expressions provide a concise way to represent functional interfaces (single abstract method) using an expression.\n      </p>\n\n      <h2>42. What is the difference between a shallow copy and a deep copy?</h2>\n      <h3>Shallow Copy:</h3>\n      <p>Copies the object's reference, not the actual object. Changes in the original affect the copied object.</p>\n      <h3>Deep Copy:</h3>\n      <p>Copies the actual object's values, creating a separate copy. Changes in the original do not affect the copied object.</p>\n\n      <h2>43. What is Garbage Collection in Java?</h2>\n      <p>\n        Garbage collection automatically frees memory by removing objects that are no longer reachable or referenced.\n      </p>\n\n      <h2>44. What is the purpose of the transient keyword?</h2>\n      <p>\n        The transient keyword prevents serialization of a variable, meaning it will not be saved or restored during serialization.\n      </p>\n\n      <h2>45. What is the purpose of the volatile keyword?</h2>\n      <p>\n        The volatile keyword indicates that a variable's value may be changed by different threads, ensuring visibility and preventing caching.\n      </p>\n\n      <h2>46. What is reflection in Java?</h2>\n      <p>\n        Reflection allows inspection and manipulation of classes, methods, and fields at runtime, enabling dynamic behavior.\n      </p>\n\n      <h2>47. What are Annotations in Java?</h2>\n      <p>\n        Annotations provide metadata about the code. They do not affect the program's semantics but can be processed by tools or frameworks.\n      </p>\n\n      <h2>48. What is the Java Development Process?</h2>\n      <p>\n        The Java development process includes writing code, compiling to bytecode, running on the JVM, and testing/debugging.\n      </p>\n\n      <h2>49. Explain the concept of method references in Java 8.</h2>\n      <p>\n        Method references provide a way to refer to methods without invoking them, allowing more concise and readable code, particularly with functional interfaces.\n      </p>\n\n      <h2>50. What are Streams in Java 8?</h2>\n      <p>\n        Streams are sequences of elements that support various methods for processing data in a functional style (e.g., filter, map, collect).\n      </p>\n\n      <style jsx>{`\n        div {\n          margin: 20px;\n        }\n        h1 {\n          font-size: 24px;\n          margin-bottom: 10px;\n        }\n        h2 {\n          font-size: 20px;\n          margin-top: 20px;\n        }\n        h3 {\n          font-size: 18px;\n          margin-top: 15px;\n        }\n        p, ul {\n          margin-left: 20px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default JAVA_Preparation;\n"],"names":["JAVA_Preparation","_jsxs","children","Helmet","_jsx","name","content","property","rel","href","jsx"],"sourceRoot":""}