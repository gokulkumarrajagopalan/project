{"version":3,"file":"static/js/1.1136a633.chunk.js","mappings":"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","sources":["Learning/DSA/LinearSearch.jsx","Learning/buttonGroup.js","../node_modules/prismjs/components/prism-java.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport ButtonGroup from '../buttonGroup';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-java';\n\nfunction LinearSearch() {\n  const javaLangLinearsearchcode = [\n    \"public class LinearSearch {\",\n    \"    public static void main(String[] args) {\",\n    \"        int[] arr = {2, 5, 8, 10, 13, 18, 23};\",\n    \"        int target = 13;\",\n    \"        int size = arr.length;\",\n    \"        int result = linearSearch(arr, size, target);\",\n    \"        if (result != -1) {\",\n    \"            System.out.println(\\\"Element found at index: \\\" + result);\",\n    \"        } else {\",\n    \"            System.out.println(\\\"Element not found in the array\\\");\",\n    \"        }\",\n    \"    }\",\n    \"    public static int linearSearch(int[] arr, int size, int target) {\",\n    \"        for (int i = 0; i < size; i++) {\",\n    \"            if (arr[i] == target) {\",\n    \"                return i; // Return the index if found\",\n    \"            }\",\n    \"        }\",\n    \"        return -1; // Return -1 if not found\",\n    \"    }\",\n    \"}\"\n  ];\n\n  const cLangLinearsearchcode = [\n    \"#include <stdio.h>\",\n    \"int main() {\",\n    \"    int arr[] = {2, 5, 8, 10, 13, 18, 23};\",\n    \"    int target = 13;\",\n    \"    int size = sizeof(arr) / sizeof(arr[0]);\",\n    \"    int result = linearSearch(arr, size, target);\",\n    \"    if (result != -1) {\",\n    \"        printf(\\\"Element found at index: %d\\\\n\\\", result);\",\n    \"    } else {\",\n    \"        printf(\\\"Element not found in the array\\\\n\\\");\",\n    \"    }\",\n    \"    return 0;\",\n    \"}\",\n    \"int linearSearch(int arr[], int size, int target) {\",\n    \"    for (int i = 0; i < size; i++) {\",\n    \"        if (arr[i] == target) {\",\n    \"            return i; // Return the index if found\",\n    \"        }\",\n    \"    }\",\n    \"    return -1; // Return -1 if not found\",\n    \"}\"\n  ];\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n    return (\n        <div className='LinearSearch'>\n            <h2>Linear Search</h2>\n            <p>\n                Linear search, also known as sequential search, is a simple searching algorithm used to find a particular element in a list or array.\n                It sequentially checks each element of the list until the desired element is found or until the end of the list is reached.\n            </p>\n            <h3>Algorithm:</h3>\n            <p>\n                <strong>Step-by-step explanation:</strong>\n                <ol>\n                    <li> <h4>Start at the beginning:</h4> Linear search starts from the first element of the list.</li>\n                    <li> <h4>Compare elements:</h4> It compares the target element with each element in the list sequentially.</li>\n                    <li> <h4>If found:</h4> If the current element matches the target, the search ends, and the index of the element is returned.</li>\n                    <li><h4>If not found:</h4>\n                        <ol >\n                            <li>Move to the next element.</li>\n                            <li>Repeat steps 2-3 until the element is found or until the end of the list is reached.</li>\n                        </ol>\n                    </li>\n                    <li><h4>If reached the end:</h4> If the search completes without finding the element, a signal (like returning -1) is used to indicate that the element is not present in the list.</li>\n                </ol>\n            </p>\n\n            <ButtonGroup\n          handleLanguageChange={(language) => (` ${language}`)}\n          cLangElements={cLangLinearsearchcode}\n          javaLangElements={javaLangLinearsearchcode}\n        />\n\n            <h3>Characteristics:</h3>\n            <ul>\n                <li>Unordered lists: Linear search can be used on both sorted and unsorted lists.</li>\n                <li>Simple implementation: It's straightforward to understand and implement.</li>\n                <li>Efficiency: For large lists, it's less efficient compared to other search algorithms like binary search for sorted lists.</li>\n            </ul>\n            <h3>Complexity:</h3>\n            <ul>\n                <li>Best Case: O(1) - When the element is found at the beginning.</li>\n                <li>Average Case: O(n) - where 'n' is the number of elements in the list.</li>\n                <li>Worst Case: O(n) - When the element is at the end of the list or not present.</li>\n            </ul>\n            <p>\n                Linear search is suitable for small lists or situations where the list is unordered or the overhead of sorting the list for more efficient algorithms isn't worth it.\n            </p>\n        </div>\n    );\n}\n\nexport default LinearSearch;\n","\nimport React, { useState, useEffect } from \"react\";\nimport Prism from \"prismjs\";\nimport \"prismjs/themes/prism.css\";\nimport \"prismjs/components/prism-c\"; // Import the 'c' component for C language support\nimport \"./buttongroup.css\";\n\nfunction ButtonGroup({ handleLanguageChange, cLangElements, javaLangElements }) {\n  const [language, setLanguage] = useState(\"c\");\n  const [copyStatus, setCopyStatus] = useState(\"\");\n\n  const copyToClipboard = () => {\n    const codeToCopy =\n      (language === \"c\" ? cLangElements : javaLangElements).join(\"\\n\");\n    navigator.clipboard\n      .writeText(codeToCopy)\n      .then(() => {\n        setCopyStatus(\"Copied..!\");\n        setTimeout(() => {\n          setCopyStatus(\"\");\n        }, 1000);\n      })\n      .catch(() => setCopyStatus(\"Copy Failed\"));\n  };\n\n  useEffect(() => {\n    Prism.highlightAll(); \n  }, [cLangElements, javaLangElements]);\n\n  const renderSyntax = (selectedLangElements) => {\n    return (\n      <div className=\"code-section\">\n        <div className=\"copy-button-container\">\n          <button\n            className={`copy-button ${copyStatus && \"copied\"}`}\n            onClick={copyToClipboard}\n          >\n            {copyStatus || \"Copy Code\"}\n          </button>\n        </div>\n        <pre className={`language-c`}>\n          <code className={`language-c`}>\n            {selectedLangElements.join(\"\\n\")}\n          </code>\n        </pre>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"button-group\">\n        <button\n          className={`btnC ${language === \"c\" ? \"active\" : \"\"}`}\n          onClick={() => {\n            setLanguage(\"c\");\n            handleLanguageChange(\"c\");\n          }}\n        >\n          C\n        </button>\n        <button\n          className={`btnJava ${language === \"java\" ? \"active\" : \"\"}`}\n          onClick={() => {\n            setLanguage(\"java\");\n            handleLanguageChange(\"java\");\n          }}\n        >\n          Java\n        </button>\n      </div>\n      <div className=\"code-section-container\">\n        {renderSyntax(language === \"c\" ? cLangElements : javaLangElements )\n}\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonGroup; \n","(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// full package (optional) + parent classes (optional)\n\tvar classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the java naming conventions\n\tvar className = {\n\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\./\n\t\t}\n\t};\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'string': {\n\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables, parameters, and constructor references\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// class names based on keyword\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'constant': /\\b[A-Z][A-Z_\\d]+\\b/\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t\t'import': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'static',\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'static': /\\b\\w+$/,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n"],"names":["useEffect","Prism","_jsxs","className","children","_jsx","ButtonGroup","handleLanguageChange","language","concat","cLangElements","javaLangElements","_ref","setLanguage","useState","copyStatus","setCopyStatus","copyToClipboard","codeToCopy","join","navigator","clipboard","writeText","then","setTimeout","catch","onClick","selectedLangElements","keywords","classNamePrefix","source","pattern","RegExp","lookbehind","inside","languages","java","extend","greedy","clike","function","insertBefore","alias","namespace","replace"],"sourceRoot":""}