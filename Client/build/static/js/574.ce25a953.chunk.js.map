{"version":3,"file":"static/js/574.ce25a953.chunk.js","mappings":"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","sources":["Auth/SignIn.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport NavBar from \"../LandingPage/NavBar\";\nimport { useNavigate } from \"react-router-dom\";\nimport API_URLS from \"../config\";\nimport './Style_Sign.css'; \n\nconst EMAIL_REGEX = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n//const API_URL = \"http://localhost:3700/SignIn\";\nconst ENV = process.env.REACT_APP_ENV || \"production\";\nconst API_URL = API_URLS[ENV] + \"/SignIn\";\n\nconst SignIn = () => {\n  const userRef = useRef();\n  const errRef = useRef();\n  const navigate = useNavigate();\n\n  const [EmailID, setEmailID] = useState(\"\");\n  const [validName, setValidName] = useState(false);\n  const [EmailIDFocus, setEmailIDFocus] = useState(false);\n\n  const [pwd, setPwd] = useState(\"\");\n  const [validPwd, setValidPwd] = useState(false);\n  const [pwdFocus, setPwdFocus] = useState(false);\n\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const [userEmail, setUserEmail] = useState(\"\");\n\n  useEffect(() => {\n    userRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    setValidName(EMAIL_REGEX.test(EmailID));\n  }, [EmailID]);\n\n  useEffect(() => {\n    setValidPwd(PWD_REGEX.test(pwd));\n  }, [pwd]);\n\n  axios.defaults.withCredentials = true;\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await axios.post(API_URL, {\n        email: EmailID,\n        password: pwd,\n      });\n\n      if (response.data.Login) {\n        navigate(\"/JobPostScreen\");\n      } else {\n        setErrMsg(\"Invalid email or password\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setErrMsg(\"Login Failed\");\n    }\n  };\n\n  return (\n    <>\n      <NavBar />\n      {success ? (\n        <section>\n          <h1>Success!</h1>\n          <h3>Welcome {userEmail}</h3>\n          <p>\n            <a href=\"#\">Sign In</a>\n          </p>\n        </section>\n      ) : (\n        <section className=\"Register_container\">\n          <div className=\"register-card\">\n            <p\n              ref={errRef}\n              className={errMsg ? \"errmsg\" : \"offscreen\"}\n              aria-live=\"assertive\"\n            >\n              {errMsg}\n            </p>\n            <h1 className=\"Header_signup\">Sign In</h1>\n            <form onSubmit={handleSubmit}>\n              <label htmlFor=\"EmailID\" className=\"register_label\">Email :</label>\n              <input\n                className=\"register-input\"\n                type=\"text\"\n                id=\"txtemailID\"\n                ref={userRef}\n                autoComplete=\"off\"\n                onChange={(e) => setEmailID(e.target.value)}\n                value={EmailID}\n                required\n                aria-invalid={validName ? \"false\" : \"true\"}\n                aria-describedby=\"uidnote\"\n                onFocus={() => setEmailIDFocus(true)}\n                onBlur={() => setEmailIDFocus(false)}\n              />\n\n              <label htmlFor=\"password\" className=\"register_label\">Password:</label>\n              <input\n                className=\"register-input\"\n                type=\"password\"\n                id=\"password\"\n                onChange={(e) => setPwd(e.target.value)}\n                value={pwd}\n                required\n                aria-invalid={validPwd ? \"false\" : \"true\"}\n                aria-describedby=\"pwdnote\"\n                onFocus={() => setPwdFocus(true)}\n                onBlur={() => setPwdFocus(false)}\n              />\n              <button className=\"btn_signup\">Sign In</button>\n            </form>\n            <p>\n              Forget Password?\n              <br />\n              <span className=\"line\">\n                <a href=\"SignUp\">Sign Up</a>\n              </span>\n            </p>\n          </div>\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default SignIn;\n"],"names":["EMAIL_REGEX","PWD_REGEX","ENV","process","REACT_APP_ENV","API_URL","API_URLS","SignIn","userRef","useRef","errRef","navigate","useNavigate","EmailID","setEmailID","useState","validName","setValidName","EmailIDFocus","setEmailIDFocus","pwd","setPwd","validPwd","setValidPwd","pwdFocus","setPwdFocus","errMsg","setErrMsg","success","setSuccess","userEmail","setUserEmail","useEffect","current","focus","test","axios","defaults","withCredentials","_jsxs","_Fragment","children","_jsx","NavBar","href","className","ref","onSubmit","async","e","preventDefault","post","email","password","data","Login","error","console","htmlFor","type","id","autoComplete","onChange","target","value","required","onFocus","onBlur"],"sourceRoot":""}