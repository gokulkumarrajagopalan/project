{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\project\\\\Client\\\\src\\\\Learning\\\\DSA\\\\InsertionSort.jsx\";\nimport React, { useEffect } from 'react';\nimport ButtonGroup from '../buttonGroup';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-java';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InsertionSort() {\n  const cLangIsertionSortchcode = [\"#include <stdio.h>\", \"\", \"void insertionSort(int arr[], int n) {\", \"    int i, key, j;\", \"    for (i = 1; i < n; i++) {\", \"        key = arr[i];\", \"        j = i - 1;\", \"\", \"        // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position\", \"        while (j >= 0 && arr[j] > key) {\", \"            arr[j + 1] = arr[j];\", \"            j = j - 1;\", \"        }\", \"        arr[j + 1] = key;\", \"    }\", \"}\", \"\", \"void printArray(int arr[], int size) {\", \"    int i;\", \"    for (i = 0; i < size; i++)\", \"        printf(\\\"%d \\\", arr[i]);\", \"    printf(\\\"\\\\n\\\");\", \"}\", \"\", \"int main() {\", \"    int arr[] = {12, 11, 13, 5, 6};\", \"    int n = sizeof(arr) / sizeof(arr[0]);\", \"\", \"    printf(\\\"Original array: \\\\n\\\");\", \"    printArray(arr, n);\", \"\", \"    insertionSort(arr, n);\", \"\", \"    printf(\\\"Sorted array: \\\\n\\\");\", \"    printArray(arr, n);\", \"\", \"    return 0;\", \"}\"];\n  const javaLangIsertionSortchcode = [\"public class InsertionSort {\", \"    // Function to perform insertion sort\", \"    static void insertionSort(int arr[], int n) {\", \"        int i, key, j;\", \"        for (i = 1; i < n; i++) {\", \"            key = arr[i];\", \"            j = i - 1;\", \"\", \"            // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position\", \"            while (j >= 0 && arr[j] > key) {\", \"                arr[j + 1] = arr[j];\", \"                j = j - 1;\", \"            }\", \"            arr[j + 1] = key;\", \"        }\", \"    }\", \"\", \"    // Function to print an array\", \"    static void printArray(int arr[], int size) {\", \"        for (int i = 0; i < size; i++)\", \"            System.out.print(arr[i] + \\\" \\\");\", \"        System.out.println();\", \"    }\", \"\", \"    public static void main(String[] args) {\", \"        int arr[] = {12, 11, 13, 5, 6};\", \"        int n = arr.length;\", \"\", \"        System.out.println(\\\"Original array: \\\");\", \"        printArray(arr, n);\", \"\", \"        insertionSort(arr, n);\", \"\", \"        System.out.println(\\\"Sorted array: \\\");\", \"        printArray(arr, n);\", \"    }\", \"}\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Insertionsort-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Insertion Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Insertion sort is a simple sorting algorithm that iterates through an array, gradually building a sorted sequence. It repeatedly takes one element at a time and inserts it into its proper position in the sorted part of the array.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Algorithm:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Start with the second element (index 1) of the array.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Compare it with the first element.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"If it's smaller, swap them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Move to the third element (index 2) and insert it into its correct position among the first three elements.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Compare with the second element and swap if needed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Compare with the first element and swap if needed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Continue this process for each element in the array.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Insert each element into its proper place among the sorted elements to its left.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"The array is sorted when all elements are in their correct positions.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      handleLanguageChange: language => ` ${language}`,\n      cLangElements: cLangIsertionSortchcode,\n      javaLangElements: javaLangIsertionSortchcode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Time Complexity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Worst Case (O(n^2)):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 4\n      }, this), \" In the worst case, each element in the unsorted array needs to be compared and potentially swapped with every other element, resulting in a quadratic time complexity of O(n^2).\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Best Case (O(n)):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 4\n      }, this), \" In the best case, when the array is already sorted, only one pass through the array is needed, and each element is compared to its predecessor once, leading to a linear time complexity of O(n).\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Average Case (O(n^2)):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 4\n      }, this), \" On average, insertion sort requires approximately n^2/4 comparisons and n^2/4 swaps, resulting in a quadratic time complexity of O(n^2).\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useEffect","ButtonGroup","Prism","jsxDEV","_jsxDEV","InsertionSort","cLangIsertionSortchcode","javaLangIsertionSortchcode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleLanguageChange","language","cLangElements","javaLangElements","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/project/Client/src/Learning/DSA/InsertionSort.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport ButtonGroup from '../buttonGroup';\r\nimport Prism from 'prismjs';\r\nimport 'prismjs/themes/prism.css';\r\nimport 'prismjs/components/prism-c';\r\nimport 'prismjs/components/prism-java';\r\n\r\n\r\nfunction InsertionSort(){\r\n\r\n    const cLangIsertionSortchcode  = [\"#include <stdio.h>\",\r\n    \"\",\r\n    \"void insertionSort(int arr[], int n) {\",\r\n    \"    int i, key, j;\",\r\n    \"    for (i = 1; i < n; i++) {\",\r\n    \"        key = arr[i];\",\r\n    \"        j = i - 1;\",\r\n    \"\",\r\n    \"        // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position\",\r\n    \"        while (j >= 0 && arr[j] > key) {\",\r\n    \"            arr[j + 1] = arr[j];\",\r\n    \"            j = j - 1;\",\r\n    \"        }\",\r\n    \"        arr[j + 1] = key;\",\r\n    \"    }\",\r\n    \"}\",\r\n    \"\",\r\n    \"void printArray(int arr[], int size) {\",\r\n    \"    int i;\",\r\n    \"    for (i = 0; i < size; i++)\",\r\n    \"        printf(\\\"%d \\\", arr[i]);\",\r\n    \"    printf(\\\"\\\\n\\\");\",\r\n    \"}\",\r\n    \"\",\r\n    \"int main() {\",\r\n    \"    int arr[] = {12, 11, 13, 5, 6};\",\r\n    \"    int n = sizeof(arr) / sizeof(arr[0]);\",\r\n    \"\",\r\n    \"    printf(\\\"Original array: \\\\n\\\");\",\r\n    \"    printArray(arr, n);\",\r\n    \"\",\r\n    \"    insertionSort(arr, n);\",\r\n    \"\",\r\n    \"    printf(\\\"Sorted array: \\\\n\\\");\",\r\n    \"    printArray(arr, n);\",\r\n    \"\",\r\n    \"    return 0;\",\r\n    \"}\"\r\n    ];\r\n\r\n\r\nconst javaLangIsertionSortchcode = [\r\n    \"public class InsertionSort {\",\r\n\"    // Function to perform insertion sort\",\r\n\"    static void insertionSort(int arr[], int n) {\",\r\n\"        int i, key, j;\",\r\n\"        for (i = 1; i < n; i++) {\",\r\n\"            key = arr[i];\",\r\n\"            j = i - 1;\",\r\n\"\",\r\n\"            // Move elements of arr[0..i-1] that are greater than key to one position ahead of their current position\",\r\n\"            while (j >= 0 && arr[j] > key) {\",\r\n\"                arr[j + 1] = arr[j];\",\r\n\"                j = j - 1;\",\r\n\"            }\",\r\n\"            arr[j + 1] = key;\",\r\n\"        }\",\r\n\"    }\",\r\n\"\",\r\n\"    // Function to print an array\",\r\n\"    static void printArray(int arr[], int size) {\",\r\n\"        for (int i = 0; i < size; i++)\",\r\n\"            System.out.print(arr[i] + \\\" \\\");\",\r\n\"        System.out.println();\",\r\n\"    }\",\r\n\"\",\r\n\"    public static void main(String[] args) {\",\r\n\"        int arr[] = {12, 11, 13, 5, 6};\",\r\n\"        int n = arr.length;\",\r\n\"\",\r\n\"        System.out.println(\\\"Original array: \\\");\",\r\n\"        printArray(arr, n);\",\r\n\"\",\r\n\"        insertionSort(arr, n);\",\r\n\"\",\r\n\"        System.out.println(\\\"Sorted array: \\\");\",\r\n\"        printArray(arr, n);\",\r\n\"    }\",\r\n\"}\"\r\n\r\n] ; \r\n\r\n    return(\r\n        <div className=\"Insertionsort-container\">\r\n            <h2>Insertion Sort</h2>\r\n\r\n            <p> \r\nInsertion sort is a simple sorting algorithm that iterates through an array, gradually building a sorted sequence. \r\nIt repeatedly takes one element at a time and inserts it into its proper position in the sorted part of the array.\r\n</p>\r\n           \r\n<h2>Algorithm:</h2>\r\n<ul>\r\n    <li>Start with the second element (index 1) of the array.</li>\r\n    <li>Compare it with the first element.</li>\r\n        <ul>\r\n            <li>If it's smaller, swap them.</li>\r\n        </ul>\r\n    <li>Move to the third element (index 2) and insert it into its correct position among the first three elements.</li>\r\n        <ul>\r\n            <li>Compare with the second element and swap if needed.</li>\r\n            <li>Compare with the first element and swap if needed.</li>\r\n        </ul>\r\n    <li>Continue this process for each element in the array.</li>\r\n    <li>Insert each element into its proper place among the sorted elements to its left.</li>\r\n    <li>The array is sorted when all elements are in their correct positions.</li>\r\n</ul>\r\n\r\n\r\n<ButtonGroup\r\n          handleLanguageChange={(language) => (` ${language}`)}\r\n          cLangElements={cLangIsertionSortchcode}\r\n          javaLangElements={javaLangIsertionSortchcode}\r\n        />\r\n\r\n\r\n        \r\n<h2>Time Complexity</h2>\r\n\r\n<p><strong>Worst Case (O(n^2)):</strong> In the worst case, each element in the unsorted array needs to be compared and potentially swapped with every other element, resulting in a quadratic time complexity of O(n^2).</p>\r\n\r\n<p><strong>Best Case (O(n)):</strong> In the best case, when the array is already sorted, only one pass through the array is needed, and each element is compared to its predecessor once, leading to a linear time complexity of O(n).</p>\r\n\r\n<p><strong>Average Case (O(n^2)):</strong> On average, insertion sort requires approximately n^2/4 comparisons and n^2/4 swaps, resulting in a quadratic time complexity of O(n^2).</p>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default InsertionSort;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}