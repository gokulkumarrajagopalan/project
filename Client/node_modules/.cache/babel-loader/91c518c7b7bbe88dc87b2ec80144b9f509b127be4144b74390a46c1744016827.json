{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\project\\\\Client\\\\src\\\\Learning\\\\DSA\\\\LinearSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport ButtonGroup from '../buttonGroup';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism.css';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-java';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LinearSearch() {\n  _s();\n  const javaLangLinearsearchcode = [\"public class LinearSearch {\", \"    public static void main(String[] args) {\", \"        int[] arr = {2, 5, 8, 10, 13, 18, 23};\", \"        int target = 13;\", \"        int size = arr.length;\", \"        int result = linearSearch(arr, size, target);\", \"        if (result != -1) {\", \"            System.out.println(\\\"Element found at index: \\\" + result);\", \"        } else {\", \"            System.out.println(\\\"Element not found in the array\\\");\", \"        }\", \"    }\", \"    public static int linearSearch(int[] arr, int size, int target) {\", \"        for (int i = 0; i < size; i++) {\", \"            if (arr[i] == target) {\", \"                return i; // Return the index if found\", \"            }\", \"        }\", \"        return -1; // Return -1 if not found\", \"    }\", \"}\"];\n  const cLangLinearsearchcode = [\"#include <stdio.h>\", \"int main() {\", \"    int arr[] = {2, 5, 8, 10, 13, 18, 23};\", \"    int target = 13;\", \"    int size = sizeof(arr) / sizeof(arr[0]);\", \"    int result = linearSearch(arr, size, target);\", \"    if (result != -1) {\", \"        printf(\\\"Element found at index: %d\\\\n\\\", result);\", \"    } else {\", \"        printf(\\\"Element not found in the array\\\\n\\\");\", \"    }\", \"    return 0;\", \"}\", \"int linearSearch(int arr[], int size, int target) {\", \"    for (int i = 0; i < size; i++) {\", \"        if (arr[i] == target) {\", \"            return i; // Return the index if found\", \"        }\", \"    }\", \"    return -1; // Return -1 if not found\", \"}\"];\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"LinearSearch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Linear Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Linear search, also known as sequential search, is a simple searching algorithm used to find a particular element in a list or array. It sequentially checks each element of the list until the desired element is found or until the end of the list is reached.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Algorithm:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Step-by-step explanation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Start at the beginning:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 26\n          }, this), \" Linear search starts from the first element of the list.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Compare elements:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 26\n          }, this), \" It compares the target element with each element in the list sequentially.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"If found:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 26\n          }, this), \" If the current element matches the target, the search ends, and the index of the element is returned.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"If not found:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Move to the next element.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Repeat steps 2-3 until the element is found or until the end of the list is reached.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"If reached the end:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), \" If the search completes without finding the element, a signal (like returning -1) is used to indicate that the element is not present in the list.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      handleLanguageChange: language => ` ${language}`,\n      cLangElements: cLangLinearsearchcode,\n      javaLangElements: javaLangLinearsearchcode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Characteristics:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Unordered lists: Linear search can be used on both sorted and unsorted lists.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Simple implementation: It's straightforward to understand and implement.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Efficiency: For large lists, it's less efficient compared to other search algorithms like binary search for sorted lists.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Complexity:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Best Case: O(1) - When the element is found at the beginning.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Average Case: O(n) - where 'n' is the number of elements in the list.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Worst Case: O(n) - When the element is at the end of the list or not present.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Linear search is suitable for small lists or situations where the list is unordered or the overhead of sorting the list for more efficient algorithms isn't worth it.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(LinearSearch, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LinearSearch;\nexport default LinearSearch;\nvar _c;\n$RefreshReg$(_c, \"LinearSearch\");","map":{"version":3,"names":["React","useEffect","ButtonGroup","Prism","jsxDEV","_jsxDEV","LinearSearch","_s","javaLangLinearsearchcode","cLangLinearsearchcode","highlightAll","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleLanguageChange","language","cLangElements","javaLangElements","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/project/Client/src/Learning/DSA/LinearSearch.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport ButtonGroup from '../buttonGroup';\r\nimport Prism from 'prismjs';\r\nimport 'prismjs/themes/prism.css';\r\nimport 'prismjs/components/prism-c';\r\nimport 'prismjs/components/prism-java';\r\n\r\nfunction LinearSearch() {\r\n  const javaLangLinearsearchcode = [\r\n    \"public class LinearSearch {\",\r\n    \"    public static void main(String[] args) {\",\r\n    \"        int[] arr = {2, 5, 8, 10, 13, 18, 23};\",\r\n    \"        int target = 13;\",\r\n    \"        int size = arr.length;\",\r\n    \"        int result = linearSearch(arr, size, target);\",\r\n    \"        if (result != -1) {\",\r\n    \"            System.out.println(\\\"Element found at index: \\\" + result);\",\r\n    \"        } else {\",\r\n    \"            System.out.println(\\\"Element not found in the array\\\");\",\r\n    \"        }\",\r\n    \"    }\",\r\n    \"    public static int linearSearch(int[] arr, int size, int target) {\",\r\n    \"        for (int i = 0; i < size; i++) {\",\r\n    \"            if (arr[i] == target) {\",\r\n    \"                return i; // Return the index if found\",\r\n    \"            }\",\r\n    \"        }\",\r\n    \"        return -1; // Return -1 if not found\",\r\n    \"    }\",\r\n    \"}\"\r\n  ];\r\n\r\n  const cLangLinearsearchcode = [\r\n    \"#include <stdio.h>\",\r\n    \"int main() {\",\r\n    \"    int arr[] = {2, 5, 8, 10, 13, 18, 23};\",\r\n    \"    int target = 13;\",\r\n    \"    int size = sizeof(arr) / sizeof(arr[0]);\",\r\n    \"    int result = linearSearch(arr, size, target);\",\r\n    \"    if (result != -1) {\",\r\n    \"        printf(\\\"Element found at index: %d\\\\n\\\", result);\",\r\n    \"    } else {\",\r\n    \"        printf(\\\"Element not found in the array\\\\n\\\");\",\r\n    \"    }\",\r\n    \"    return 0;\",\r\n    \"}\",\r\n    \"int linearSearch(int arr[], int size, int target) {\",\r\n    \"    for (int i = 0; i < size; i++) {\",\r\n    \"        if (arr[i] == target) {\",\r\n    \"            return i; // Return the index if found\",\r\n    \"        }\",\r\n    \"    }\",\r\n    \"    return -1; // Return -1 if not found\",\r\n    \"}\"\r\n  ];\r\n\r\n  useEffect(() => {\r\n    Prism.highlightAll();\r\n  }, []);\r\n\r\n    return (\r\n        <div className='LinearSearch'>\r\n            <h2>Linear Search</h2>\r\n            <p>\r\n                Linear search, also known as sequential search, is a simple searching algorithm used to find a particular element in a list or array.\r\n                It sequentially checks each element of the list until the desired element is found or until the end of the list is reached.\r\n            </p>\r\n            <h3>Algorithm:</h3>\r\n            <p>\r\n                <strong>Step-by-step explanation:</strong>\r\n                <ol>\r\n                    <li> <h4>Start at the beginning:</h4> Linear search starts from the first element of the list.</li>\r\n                    <li> <h4>Compare elements:</h4> It compares the target element with each element in the list sequentially.</li>\r\n                    <li> <h4>If found:</h4> If the current element matches the target, the search ends, and the index of the element is returned.</li>\r\n                    <li><h4>If not found:</h4>\r\n                        <ol >\r\n                            <li>Move to the next element.</li>\r\n                            <li>Repeat steps 2-3 until the element is found or until the end of the list is reached.</li>\r\n                        </ol>\r\n                    </li>\r\n                    <li><h4>If reached the end:</h4> If the search completes without finding the element, a signal (like returning -1) is used to indicate that the element is not present in the list.</li>\r\n                </ol>\r\n            </p>\r\n\r\n            <ButtonGroup\r\n          handleLanguageChange={(language) => (` ${language}`)}\r\n          cLangElements={cLangLinearsearchcode}\r\n          javaLangElements={javaLangLinearsearchcode}\r\n        />\r\n\r\n            <h3>Characteristics:</h3>\r\n            <ul>\r\n                <li>Unordered lists: Linear search can be used on both sorted and unsorted lists.</li>\r\n                <li>Simple implementation: It's straightforward to understand and implement.</li>\r\n                <li>Efficiency: For large lists, it's less efficient compared to other search algorithms like binary search for sorted lists.</li>\r\n            </ul>\r\n            <h3>Complexity:</h3>\r\n            <ul>\r\n                <li>Best Case: O(1) - When the element is found at the beginning.</li>\r\n                <li>Average Case: O(n) - where 'n' is the number of elements in the list.</li>\r\n                <li>Worst Case: O(n) - When the element is at the end of the list or not present.</li>\r\n            </ul>\r\n            <p>\r\n                Linear search is suitable for small lists or situations where the list is unordered or the overhead of sorting the list for more efficient algorithms isn't worth it.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LinearSearch;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}